// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::FormatOptions;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeInternetAddress")]
    pub struct InternetAddress(Object<ffi::InternetAddress, ffi::InternetAddressClass>);

    match fn {
        type_ => || ffi::internet_address_get_type(),
    }
}

pub const NONE_INTERNET_ADDRESS: Option<&InternetAddress> = None;

pub trait InternetAddressExt: 'static {
    #[doc(alias = "internet_address_get_charset")]
    #[doc(alias = "get_charset")]
    fn charset(&self) -> Option<glib::GString>;

    #[doc(alias = "internet_address_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "internet_address_set_charset")]
    fn set_charset(&self, charset: Option<&str>);

    #[doc(alias = "internet_address_set_name")]
    fn set_name(&self, name: &str);

    #[doc(alias = "internet_address_to_string")]
    fn to_string(&self, options: Option<&FormatOptions>, encode: bool) -> Option<glib::GString>;
}

impl<O: IsA<InternetAddress>> InternetAddressExt for O {
    fn charset(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::internet_address_get_charset(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::internet_address_get_name(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_charset(&self, charset: Option<&str>) {
        unsafe {
            ffi::internet_address_set_charset(
                self.as_ref().to_glib_none().0,
                charset.to_glib_none().0,
            );
        }
    }

    fn set_name(&self, name: &str) {
        unsafe {
            ffi::internet_address_set_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn to_string(&self, options: Option<&FormatOptions>, encode: bool) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::internet_address_to_string(
                self.as_ref().to_glib_none().0,
                mut_override(options.to_glib_none().0),
                encode.into_glib(),
            ))
        }
    }
}

impl fmt::Display for InternetAddress {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("InternetAddress")
    }
}
