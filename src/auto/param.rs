// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use ParamEncodingMethod;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;

glib_wrapper! {
    pub struct Param(Object<gmime_sys::GMimeParam, gmime_sys::GMimeParamClass, ParamClass>);

    match fn {
        get_type => || gmime_sys::g_mime_param_get_type(),
    }
}

pub const NONE_PARAM: Option<&Param> = None;

pub trait ParamExt: 'static {
    fn get_charset(&self) -> Option<GString>;

    fn get_encoding_method(&self) -> ParamEncodingMethod;

    fn get_lang(&self) -> Option<GString>;

    fn get_name(&self) -> Option<GString>;

    fn get_value(&self) -> Option<GString>;

    fn set_charset(&self, charset: &str);

    fn set_encoding_method(&self, method: ParamEncodingMethod);

    fn set_lang(&self, lang: &str);

    fn set_value(&self, value: &str);
}

impl<O: IsA<Param>> ParamExt for O {
    fn get_charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_param_get_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn get_encoding_method(&self) -> ParamEncodingMethod {
        unsafe {
            from_glib(gmime_sys::g_mime_param_get_encoding_method(self.as_ref().to_glib_none().0))
        }
    }

    fn get_lang(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_param_get_lang(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_param_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_value(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_param_get_value(self.as_ref().to_glib_none().0))
        }
    }

    fn set_charset(&self, charset: &str) {
        unsafe {
            gmime_sys::g_mime_param_set_charset(self.as_ref().to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn set_encoding_method(&self, method: ParamEncodingMethod) {
        unsafe {
            gmime_sys::g_mime_param_set_encoding_method(self.as_ref().to_glib_none().0, method.to_glib());
        }
    }

    fn set_lang(&self, lang: &str) {
        unsafe {
            gmime_sys::g_mime_param_set_lang(self.as_ref().to_glib_none().0, lang.to_glib_none().0);
        }
    }

    fn set_value(&self, value: &str) {
        unsafe {
            gmime_sys::g_mime_param_set_value(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }
}

impl fmt::Display for Param {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Param")
    }
}
