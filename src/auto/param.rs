// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::ParamEncodingMethod;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeParam")]
    pub struct Param(Object<ffi::GMimeParam, ffi::GMimeParamClass>);

    match fn {
        type_ => || ffi::g_mime_param_get_type(),
    }
}

pub const NONE_PARAM: Option<&Param> = None;

pub trait ParamExt: 'static {
    #[doc(alias = "g_mime_param_get_charset")]
    #[doc(alias = "get_charset")]
    fn charset(&self) -> Option<glib::GString>;

    #[doc(alias = "g_mime_param_get_encoding_method")]
    #[doc(alias = "get_encoding_method")]
    fn encoding_method(&self) -> ParamEncodingMethod;

    #[doc(alias = "g_mime_param_get_lang")]
    #[doc(alias = "get_lang")]
    fn lang(&self) -> Option<glib::GString>;

    #[doc(alias = "g_mime_param_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "g_mime_param_get_value")]
    #[doc(alias = "get_value")]
    fn value(&self) -> Option<glib::GString>;

    #[doc(alias = "g_mime_param_set_charset")]
    fn set_charset(&self, charset: &str);

    #[doc(alias = "g_mime_param_set_encoding_method")]
    fn set_encoding_method(&self, method: ParamEncodingMethod);

    #[doc(alias = "g_mime_param_set_lang")]
    fn set_lang(&self, lang: &str);

    #[doc(alias = "g_mime_param_set_value")]
    fn set_value(&self, value: &str);
}

impl<O: IsA<Param>> ParamExt for O {
    fn charset(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::g_mime_param_get_charset(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn encoding_method(&self) -> ParamEncodingMethod {
        unsafe {
            from_glib(ffi::g_mime_param_get_encoding_method(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn lang(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::g_mime_param_get_lang(self.as_ref().to_glib_none().0)) }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::g_mime_param_get_name(self.as_ref().to_glib_none().0)) }
    }

    fn value(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::g_mime_param_get_value(self.as_ref().to_glib_none().0)) }
    }

    fn set_charset(&self, charset: &str) {
        unsafe {
            ffi::g_mime_param_set_charset(self.as_ref().to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn set_encoding_method(&self, method: ParamEncodingMethod) {
        unsafe {
            ffi::g_mime_param_set_encoding_method(
                self.as_ref().to_glib_none().0,
                method.into_glib(),
            );
        }
    }

    fn set_lang(&self, lang: &str) {
        unsafe {
            ffi::g_mime_param_set_lang(self.as_ref().to_glib_none().0, lang.to_glib_none().0);
        }
    }

    fn set_value(&self, value: &str) {
        unsafe {
            ffi::g_mime_param_set_value(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }
}

impl fmt::Display for Param {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Param")
    }
}
