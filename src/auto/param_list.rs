// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 4740f5e+)
// DO NOT EDIT

use ParserOptions;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ParamList(Object<ffi::GMimeParamList, ffi::GMimeParamListClass>);

    match fn {
        get_type => || ffi::g_mime_param_list_get_type(),
    }
}

impl ParamList {
    pub fn new() -> ParamList {
        unsafe {
            from_glib_full(ffi::g_mime_param_list_new())
        }
    }

    pub fn parse(options: &mut ParserOptions, str: &str) -> Option<ParamList> {
        unsafe {
            from_glib_full(ffi::g_mime_param_list_parse(options.to_glib_none_mut().0, str.to_glib_none().0))
        }
    }
}

impl Default for ParamList {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ParamListExt {
    fn clear(&self);

    //fn encode(&self, options: /*Ignored*/&mut FormatOptions, fold: bool, str: /*Ignored*/&mut glib::String);

    //fn get_parameter(&self, name: &str) -> /*Ignored*/Option<Param>;

    //fn get_parameter_at(&self, index: i32) -> /*Ignored*/Option<Param>;

    fn length(&self) -> i32;

    fn remove(&self, name: &str) -> bool;

    fn remove_at(&self, index: i32) -> bool;

    fn set_parameter(&self, name: &str, value: &str);
}

impl<O: IsA<ParamList>> ParamListExt for O {
    fn clear(&self) {
        unsafe {
            ffi::g_mime_param_list_clear(self.to_glib_none().0);
        }
    }

    //fn encode(&self, options: /*Ignored*/&mut FormatOptions, fold: bool, str: /*Ignored*/&mut glib::String) {
    //    unsafe { TODO: call ffi::g_mime_param_list_encode() }
    //}

    //fn get_parameter(&self, name: &str) -> /*Ignored*/Option<Param> {
    //    unsafe { TODO: call ffi::g_mime_param_list_get_parameter() }
    //}

    //fn get_parameter_at(&self, index: i32) -> /*Ignored*/Option<Param> {
    //    unsafe { TODO: call ffi::g_mime_param_list_get_parameter_at() }
    //}

    fn length(&self) -> i32 {
        unsafe {
            ffi::g_mime_param_list_length(self.to_glib_none().0)
        }
    }

    fn remove(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_param_list_remove(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> bool {
        unsafe {
            from_glib(ffi::g_mime_param_list_remove_at(self.to_glib_none().0, index))
        }
    }

    fn set_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_param_list_set_parameter(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }
}
