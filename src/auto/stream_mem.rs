// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Stream;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct StreamMem(Object<ffi::GMimeStreamMem, ffi::GMimeStreamMemClass>): Stream;

    match fn {
        get_type => || ffi::g_mime_stream_mem_get_type(),
    }
}

impl StreamMem {
    pub fn new() -> StreamMem {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_mem_new()).downcast_unchecked()
        }
    }

    pub fn new_with_buffer(buffer: &[u8]) -> StreamMem {
        let len = buffer.len() as usize;
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_mem_new_with_buffer(buffer.to_glib_none().0, len)).downcast_unchecked()
        }
    }

    pub fn new_with_byte_array(array: &glib::ByteArray) -> StreamMem {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_mem_new_with_byte_array(array.to_glib_none().0)).downcast_unchecked()
        }
    }
}

impl Default for StreamMem {
    fn default() -> Self {
        Self::new()
    }
}

pub trait StreamMemExt {
    fn get_byte_array(&self) -> Option<glib::ByteArray>;

    fn get_owner(&self) -> bool;

    fn set_byte_array(&self, array: &glib::ByteArray);

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamMem>> StreamMemExt for O {
    fn get_byte_array(&self) -> Option<glib::ByteArray> {
        unsafe {
            from_glib_none(ffi::g_mime_stream_mem_get_byte_array(self.to_glib_none().0))
        }
    }

    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_mem_get_owner(self.to_glib_none().0))
        }
    }

    fn set_byte_array(&self, array: &glib::ByteArray) {
        unsafe {
            ffi::g_mime_stream_mem_set_byte_array(self.to_glib_none().0, array.to_glib_none().0);
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            ffi::g_mime_stream_mem_set_owner(self.to_glib_none().0, owner.to_glib());
        }
    }
}
