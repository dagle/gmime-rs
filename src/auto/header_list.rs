// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use FormatOptions;
use Header;
use ParserOptions;
use Stream;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct HeaderList(Object<ffi::GMimeHeaderList, ffi::GMimeHeaderListClass, HeaderListClass>);

    match fn {
        get_type => || ffi::g_mime_header_list_get_type(),
    }
}

impl HeaderList {
    pub fn new<'a, P: Into<Option<&'a ParserOptions>>>(options: P) -> HeaderList {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_header_list_new(mut_override(options.to_glib_none().0)))
        }
    }
}

pub const NONE_HEADER_LIST: Option<&HeaderList> = None;

pub trait HeaderListExt: 'static {
    fn append(&self, name: &str, value: &str, charset: &str);

    fn clear(&self);

    fn contains(&self, name: &str) -> bool;

    fn get_count(&self) -> i32;

    fn get_header(&self, name: &str) -> Option<Header>;

    fn get_header_at(&self, index: i32) -> Option<Header>;

    fn prepend(&self, name: &str, value: &str, charset: &str);

    fn remove(&self, name: &str) -> bool;

    fn remove_at(&self, index: i32);

    fn set(&self, name: &str, value: &str, charset: &str);

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> GString;

    fn write_to_stream<'a, P: Into<Option<&'a FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize;
}

impl<O: IsA<HeaderList>> HeaderListExt for O {
    fn append(&self, name: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_header_list_append(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn clear(&self) {
        unsafe {
            ffi::g_mime_header_list_clear(self.as_ref().to_glib_none().0);
        }
    }

    fn contains(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_header_list_contains(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_count(&self) -> i32 {
        unsafe {
            ffi::g_mime_header_list_get_count(self.as_ref().to_glib_none().0)
        }
    }

    fn get_header(&self, name: &str) -> Option<Header> {
        unsafe {
            from_glib_none(ffi::g_mime_header_list_get_header(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_header_at(&self, index: i32) -> Option<Header> {
        unsafe {
            from_glib_none(ffi::g_mime_header_list_get_header_at(self.as_ref().to_glib_none().0, index))
        }
    }

    fn prepend(&self, name: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_header_list_prepend(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn remove(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_header_list_remove(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) {
        unsafe {
            ffi::g_mime_header_list_remove_at(self.as_ref().to_glib_none().0, index);
        }
    }

    fn set(&self, name: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_header_list_set(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> GString {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_header_list_to_string(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn write_to_stream<'a, P: Into<Option<&'a FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize {
        let options = options.into();
        unsafe {
            ffi::g_mime_header_list_write_to_stream(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), stream.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for HeaderList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "HeaderList")
    }
}
