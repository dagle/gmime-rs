// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use glib::translate::*;
use gmime_sys;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum AddressType {
    Sender,
    From,
    ReplyTo,
    To,
    Cc,
    Bcc,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for AddressType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AddressType::{}", match *self {
            AddressType::Sender => "Sender",
            AddressType::From => "From",
            AddressType::ReplyTo => "ReplyTo",
            AddressType::To => "To",
            AddressType::Cc => "Cc",
            AddressType::Bcc => "Bcc",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for AddressType {
    type GlibType = gmime_sys::GMimeAddressType;

    fn to_glib(&self) -> gmime_sys::GMimeAddressType {
        match *self {
            AddressType::Sender => gmime_sys::GMIME_ADDRESS_TYPE_SENDER,
            AddressType::From => gmime_sys::GMIME_ADDRESS_TYPE_FROM,
            AddressType::ReplyTo => gmime_sys::GMIME_ADDRESS_TYPE_REPLY_TO,
            AddressType::To => gmime_sys::GMIME_ADDRESS_TYPE_TO,
            AddressType::Cc => gmime_sys::GMIME_ADDRESS_TYPE_CC,
            AddressType::Bcc => gmime_sys::GMIME_ADDRESS_TYPE_BCC,
            AddressType::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeAddressType> for AddressType {
    fn from_glib(value: gmime_sys::GMimeAddressType) -> Self {
        match value {
            0 => AddressType::Sender,
            1 => AddressType::From,
            2 => AddressType::ReplyTo,
            3 => AddressType::To,
            4 => AddressType::Cc,
            5 => AddressType::Bcc,
            value => AddressType::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum AutocryptPreferEncrypt {
    None,
    Mutual,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for AutocryptPreferEncrypt {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AutocryptPreferEncrypt::{}", match *self {
            AutocryptPreferEncrypt::None => "None",
            AutocryptPreferEncrypt::Mutual => "Mutual",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for AutocryptPreferEncrypt {
    type GlibType = gmime_sys::GMimeAutocryptPreferEncrypt;

    fn to_glib(&self) -> gmime_sys::GMimeAutocryptPreferEncrypt {
        match *self {
            AutocryptPreferEncrypt::None => gmime_sys::GMIME_AUTOCRYPT_PREFER_ENCRYPT_NONE,
            AutocryptPreferEncrypt::Mutual => gmime_sys::GMIME_AUTOCRYPT_PREFER_ENCRYPT_MUTUAL,
            AutocryptPreferEncrypt::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeAutocryptPreferEncrypt> for AutocryptPreferEncrypt {
    fn from_glib(value: gmime_sys::GMimeAutocryptPreferEncrypt) -> Self {
        match value {
            0 => AutocryptPreferEncrypt::None,
            1 => AutocryptPreferEncrypt::Mutual,
            value => AutocryptPreferEncrypt::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum EncryptFlags {
    None,
    AlwaysTrust,
    NoCompress,
    Symmetric,
    ThrowKeyids,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for EncryptFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "EncryptFlags::{}", match *self {
            EncryptFlags::None => "None",
            EncryptFlags::AlwaysTrust => "AlwaysTrust",
            EncryptFlags::NoCompress => "NoCompress",
            EncryptFlags::Symmetric => "Symmetric",
            EncryptFlags::ThrowKeyids => "ThrowKeyids",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for EncryptFlags {
    type GlibType = gmime_sys::GMimeEncryptFlags;

    fn to_glib(&self) -> gmime_sys::GMimeEncryptFlags {
        match *self {
            EncryptFlags::None => gmime_sys::GMIME_ENCRYPT_NONE,
            EncryptFlags::AlwaysTrust => gmime_sys::GMIME_ENCRYPT_ALWAYS_TRUST,
            EncryptFlags::NoCompress => gmime_sys::GMIME_ENCRYPT_NO_COMPRESS,
            EncryptFlags::Symmetric => gmime_sys::GMIME_ENCRYPT_SYMMETRIC,
            EncryptFlags::ThrowKeyids => gmime_sys::GMIME_ENCRYPT_THROW_KEYIDS,
            EncryptFlags::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeEncryptFlags> for EncryptFlags {
    fn from_glib(value: gmime_sys::GMimeEncryptFlags) -> Self {
        match value {
            0 => EncryptFlags::None,
            1 => EncryptFlags::AlwaysTrust,
            16 => EncryptFlags::NoCompress,
            32 => EncryptFlags::Symmetric,
            64 => EncryptFlags::ThrowKeyids,
            value => EncryptFlags::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum FilterFromMode {
    Default,
    Armor,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FilterFromMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterFromMode::{}", match *self {
            FilterFromMode::Default => "Default",
            FilterFromMode::Armor => "Armor",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for FilterFromMode {
    type GlibType = gmime_sys::GMimeFilterFromMode;

    fn to_glib(&self) -> gmime_sys::GMimeFilterFromMode {
        match *self {
            FilterFromMode::Default => gmime_sys::GMIME_FILTER_FROM_MODE_DEFAULT,
            FilterFromMode::Armor => gmime_sys::GMIME_FILTER_FROM_MODE_ARMOR,
            FilterFromMode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeFilterFromMode> for FilterFromMode {
    fn from_glib(value: gmime_sys::GMimeFilterFromMode) -> Self {
        match value {
            0 => FilterFromMode::Default,
            1 => FilterFromMode::Armor,
            value => FilterFromMode::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum FilterGZipMode {
    Zip,
    Unzip,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FilterGZipMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterGZipMode::{}", match *self {
            FilterGZipMode::Zip => "Zip",
            FilterGZipMode::Unzip => "Unzip",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for FilterGZipMode {
    type GlibType = gmime_sys::GMimeFilterGZipMode;

    fn to_glib(&self) -> gmime_sys::GMimeFilterGZipMode {
        match *self {
            FilterGZipMode::Zip => gmime_sys::GMIME_FILTER_GZIP_MODE_ZIP,
            FilterGZipMode::Unzip => gmime_sys::GMIME_FILTER_GZIP_MODE_UNZIP,
            FilterGZipMode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeFilterGZipMode> for FilterGZipMode {
    fn from_glib(value: gmime_sys::GMimeFilterGZipMode) -> Self {
        match value {
            0 => FilterGZipMode::Zip,
            1 => FilterGZipMode::Unzip,
            value => FilterGZipMode::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum Format {
    Message,
    Mbox,
    Mmdf,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Format {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Format::{}", match *self {
            Format::Message => "Message",
            Format::Mbox => "Mbox",
            Format::Mmdf => "Mmdf",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Format {
    type GlibType = gmime_sys::GMimeFormat;

    fn to_glib(&self) -> gmime_sys::GMimeFormat {
        match *self {
            Format::Message => gmime_sys::GMIME_FORMAT_MESSAGE,
            Format::Mbox => gmime_sys::GMIME_FORMAT_MBOX,
            Format::Mmdf => gmime_sys::GMIME_FORMAT_MMDF,
            Format::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeFormat> for Format {
    fn from_glib(value: gmime_sys::GMimeFormat) -> Self {
        match value {
            0 => Format::Message,
            1 => Format::Mbox,
            2 => Format::Mmdf,
            value => Format::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum NewLineFormat {
    Unix,
    Dos,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for NewLineFormat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "NewLineFormat::{}", match *self {
            NewLineFormat::Unix => "Unix",
            NewLineFormat::Dos => "Dos",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for NewLineFormat {
    type GlibType = gmime_sys::GMimeNewLineFormat;

    fn to_glib(&self) -> gmime_sys::GMimeNewLineFormat {
        match *self {
            NewLineFormat::Unix => gmime_sys::GMIME_NEWLINE_FORMAT_UNIX,
            NewLineFormat::Dos => gmime_sys::GMIME_NEWLINE_FORMAT_DOS,
            NewLineFormat::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeNewLineFormat> for NewLineFormat {
    fn from_glib(value: gmime_sys::GMimeNewLineFormat) -> Self {
        match value {
            0 => NewLineFormat::Unix,
            1 => NewLineFormat::Dos,
            value => NewLineFormat::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum OpenPGPData {
    None,
    Encrypted,
    Signed,
    PublicKey,
    PrivateKey,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for OpenPGPData {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "OpenPGPData::{}", match *self {
            OpenPGPData::None => "None",
            OpenPGPData::Encrypted => "Encrypted",
            OpenPGPData::Signed => "Signed",
            OpenPGPData::PublicKey => "PublicKey",
            OpenPGPData::PrivateKey => "PrivateKey",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for OpenPGPData {
    type GlibType = gmime_sys::GMimeOpenPGPData;

    fn to_glib(&self) -> gmime_sys::GMimeOpenPGPData {
        match *self {
            OpenPGPData::None => gmime_sys::GMIME_OPENPGP_DATA_NONE,
            OpenPGPData::Encrypted => gmime_sys::GMIME_OPENPGP_DATA_ENCRYPTED,
            OpenPGPData::Signed => gmime_sys::GMIME_OPENPGP_DATA_SIGNED,
            OpenPGPData::PublicKey => gmime_sys::GMIME_OPENPGP_DATA_PUBLIC_KEY,
            OpenPGPData::PrivateKey => gmime_sys::GMIME_OPENPGP_DATA_PRIVATE_KEY,
            OpenPGPData::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeOpenPGPData> for OpenPGPData {
    fn from_glib(value: gmime_sys::GMimeOpenPGPData) -> Self {
        match value {
            0 => OpenPGPData::None,
            1 => OpenPGPData::Encrypted,
            2 => OpenPGPData::Signed,
            3 => OpenPGPData::PublicKey,
            4 => OpenPGPData::PrivateKey,
            value => OpenPGPData::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum ParamEncodingMethod {
    Default,
    Rfc2231,
    Rfc2047,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for ParamEncodingMethod {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ParamEncodingMethod::{}", match *self {
            ParamEncodingMethod::Default => "Default",
            ParamEncodingMethod::Rfc2231 => "Rfc2231",
            ParamEncodingMethod::Rfc2047 => "Rfc2047",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for ParamEncodingMethod {
    type GlibType = gmime_sys::GMimeParamEncodingMethod;

    fn to_glib(&self) -> gmime_sys::GMimeParamEncodingMethod {
        match *self {
            ParamEncodingMethod::Default => gmime_sys::GMIME_PARAM_ENCODING_METHOD_DEFAULT,
            ParamEncodingMethod::Rfc2231 => gmime_sys::GMIME_PARAM_ENCODING_METHOD_RFC2231,
            ParamEncodingMethod::Rfc2047 => gmime_sys::GMIME_PARAM_ENCODING_METHOD_RFC2047,
            ParamEncodingMethod::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeParamEncodingMethod> for ParamEncodingMethod {
    fn from_glib(value: gmime_sys::GMimeParamEncodingMethod) -> Self {
        match value {
            0 => ParamEncodingMethod::Default,
            1 => ParamEncodingMethod::Rfc2231,
            2 => ParamEncodingMethod::Rfc2047,
            value => ParamEncodingMethod::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum PubKeyAlgo {
    Default,
    Rsa,
    RsaE,
    RsaS,
    ElgE,
    Dsa,
    Ecc,
    Elg,
    Ecdsa,
    Ecdh,
    Eddsa,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PubKeyAlgo {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PubKeyAlgo::{}", match *self {
            PubKeyAlgo::Default => "Default",
            PubKeyAlgo::Rsa => "Rsa",
            PubKeyAlgo::RsaE => "RsaE",
            PubKeyAlgo::RsaS => "RsaS",
            PubKeyAlgo::ElgE => "ElgE",
            PubKeyAlgo::Dsa => "Dsa",
            PubKeyAlgo::Ecc => "Ecc",
            PubKeyAlgo::Elg => "Elg",
            PubKeyAlgo::Ecdsa => "Ecdsa",
            PubKeyAlgo::Ecdh => "Ecdh",
            PubKeyAlgo::Eddsa => "Eddsa",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for PubKeyAlgo {
    type GlibType = gmime_sys::GMimePubKeyAlgo;

    fn to_glib(&self) -> gmime_sys::GMimePubKeyAlgo {
        match *self {
            PubKeyAlgo::Default => gmime_sys::GMIME_PUBKEY_ALGO_DEFAULT,
            PubKeyAlgo::Rsa => gmime_sys::GMIME_PUBKEY_ALGO_RSA,
            PubKeyAlgo::RsaE => gmime_sys::GMIME_PUBKEY_ALGO_RSA_E,
            PubKeyAlgo::RsaS => gmime_sys::GMIME_PUBKEY_ALGO_RSA_S,
            PubKeyAlgo::ElgE => gmime_sys::GMIME_PUBKEY_ALGO_ELG_E,
            PubKeyAlgo::Dsa => gmime_sys::GMIME_PUBKEY_ALGO_DSA,
            PubKeyAlgo::Ecc => gmime_sys::GMIME_PUBKEY_ALGO_ECC,
            PubKeyAlgo::Elg => gmime_sys::GMIME_PUBKEY_ALGO_ELG,
            PubKeyAlgo::Ecdsa => gmime_sys::GMIME_PUBKEY_ALGO_ECDSA,
            PubKeyAlgo::Ecdh => gmime_sys::GMIME_PUBKEY_ALGO_ECDH,
            PubKeyAlgo::Eddsa => gmime_sys::GMIME_PUBKEY_ALGO_EDDSA,
            PubKeyAlgo::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimePubKeyAlgo> for PubKeyAlgo {
    fn from_glib(value: gmime_sys::GMimePubKeyAlgo) -> Self {
        match value {
            0 => PubKeyAlgo::Default,
            1 => PubKeyAlgo::Rsa,
            2 => PubKeyAlgo::RsaE,
            3 => PubKeyAlgo::RsaS,
            16 => PubKeyAlgo::ElgE,
            17 => PubKeyAlgo::Dsa,
            18 => PubKeyAlgo::Ecc,
            20 => PubKeyAlgo::Elg,
            301 => PubKeyAlgo::Ecdsa,
            302 => PubKeyAlgo::Ecdh,
            303 => PubKeyAlgo::Eddsa,
            value => PubKeyAlgo::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum RfcComplianceMode {
    Loose,
    Strict,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for RfcComplianceMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "RfcComplianceMode::{}", match *self {
            RfcComplianceMode::Loose => "Loose",
            RfcComplianceMode::Strict => "Strict",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for RfcComplianceMode {
    type GlibType = gmime_sys::GMimeRfcComplianceMode;

    fn to_glib(&self) -> gmime_sys::GMimeRfcComplianceMode {
        match *self {
            RfcComplianceMode::Loose => gmime_sys::GMIME_RFC_COMPLIANCE_LOOSE,
            RfcComplianceMode::Strict => gmime_sys::GMIME_RFC_COMPLIANCE_STRICT,
            RfcComplianceMode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeRfcComplianceMode> for RfcComplianceMode {
    fn from_glib(value: gmime_sys::GMimeRfcComplianceMode) -> Self {
        match value {
            0 => RfcComplianceMode::Loose,
            1 => RfcComplianceMode::Strict,
            value => RfcComplianceMode::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum SecureMimeType {
    CompressedData,
    EnvelopedData,
    SignedData,
    CertsOnly,
    Unknown,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SecureMimeType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SecureMimeType::{}", match *self {
            SecureMimeType::CompressedData => "CompressedData",
            SecureMimeType::EnvelopedData => "EnvelopedData",
            SecureMimeType::SignedData => "SignedData",
            SecureMimeType::CertsOnly => "CertsOnly",
            SecureMimeType::Unknown => "Unknown",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SecureMimeType {
    type GlibType = gmime_sys::GMimeSecureMimeType;

    fn to_glib(&self) -> gmime_sys::GMimeSecureMimeType {
        match *self {
            SecureMimeType::CompressedData => gmime_sys::GMIME_SECURE_MIME_TYPE_COMPRESSED_DATA,
            SecureMimeType::EnvelopedData => gmime_sys::GMIME_SECURE_MIME_TYPE_ENVELOPED_DATA,
            SecureMimeType::SignedData => gmime_sys::GMIME_SECURE_MIME_TYPE_SIGNED_DATA,
            SecureMimeType::CertsOnly => gmime_sys::GMIME_SECURE_MIME_TYPE_CERTS_ONLY,
            SecureMimeType::Unknown => gmime_sys::GMIME_SECURE_MIME_TYPE_UNKNOWN,
            SecureMimeType::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeSecureMimeType> for SecureMimeType {
    fn from_glib(value: gmime_sys::GMimeSecureMimeType) -> Self {
        match value {
            0 => SecureMimeType::CompressedData,
            1 => SecureMimeType::EnvelopedData,
            2 => SecureMimeType::SignedData,
            3 => SecureMimeType::CertsOnly,
            4 => SecureMimeType::Unknown,
            value => SecureMimeType::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum SeekWhence {
    Set,
    Cur,
    End,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SeekWhence {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SeekWhence::{}", match *self {
            SeekWhence::Set => "Set",
            SeekWhence::Cur => "Cur",
            SeekWhence::End => "End",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SeekWhence {
    type GlibType = gmime_sys::GMimeSeekWhence;

    fn to_glib(&self) -> gmime_sys::GMimeSeekWhence {
        match *self {
            SeekWhence::Set => gmime_sys::GMIME_STREAM_SEEK_SET,
            SeekWhence::Cur => gmime_sys::GMIME_STREAM_SEEK_CUR,
            SeekWhence::End => gmime_sys::GMIME_STREAM_SEEK_END,
            SeekWhence::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeSeekWhence> for SeekWhence {
    fn from_glib(value: gmime_sys::GMimeSeekWhence) -> Self {
        match value {
            0 => SeekWhence::Set,
            1 => SeekWhence::Cur,
            2 => SeekWhence::End,
            value => SeekWhence::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum SignatureStatus {
    Valid,
    Green,
    Red,
    KeyRevoked,
    KeyExpired,
    SigExpired,
    KeyMissing,
    CrlMissing,
    CrlTooOld,
    BadPolicy,
    SysError,
    TofuConflict,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SignatureStatus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SignatureStatus::{}", match *self {
            SignatureStatus::Valid => "Valid",
            SignatureStatus::Green => "Green",
            SignatureStatus::Red => "Red",
            SignatureStatus::KeyRevoked => "KeyRevoked",
            SignatureStatus::KeyExpired => "KeyExpired",
            SignatureStatus::SigExpired => "SigExpired",
            SignatureStatus::KeyMissing => "KeyMissing",
            SignatureStatus::CrlMissing => "CrlMissing",
            SignatureStatus::CrlTooOld => "CrlTooOld",
            SignatureStatus::BadPolicy => "BadPolicy",
            SignatureStatus::SysError => "SysError",
            SignatureStatus::TofuConflict => "TofuConflict",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for SignatureStatus {
    type GlibType = gmime_sys::GMimeSignatureStatus;

    fn to_glib(&self) -> gmime_sys::GMimeSignatureStatus {
        match *self {
            SignatureStatus::Valid => gmime_sys::GMIME_SIGNATURE_STATUS_VALID,
            SignatureStatus::Green => gmime_sys::GMIME_SIGNATURE_STATUS_GREEN,
            SignatureStatus::Red => gmime_sys::GMIME_SIGNATURE_STATUS_RED,
            SignatureStatus::KeyRevoked => gmime_sys::GMIME_SIGNATURE_STATUS_KEY_REVOKED,
            SignatureStatus::KeyExpired => gmime_sys::GMIME_SIGNATURE_STATUS_KEY_EXPIRED,
            SignatureStatus::SigExpired => gmime_sys::GMIME_SIGNATURE_STATUS_SIG_EXPIRED,
            SignatureStatus::KeyMissing => gmime_sys::GMIME_SIGNATURE_STATUS_KEY_MISSING,
            SignatureStatus::CrlMissing => gmime_sys::GMIME_SIGNATURE_STATUS_CRL_MISSING,
            SignatureStatus::CrlTooOld => gmime_sys::GMIME_SIGNATURE_STATUS_CRL_TOO_OLD,
            SignatureStatus::BadPolicy => gmime_sys::GMIME_SIGNATURE_STATUS_BAD_POLICY,
            SignatureStatus::SysError => gmime_sys::GMIME_SIGNATURE_STATUS_SYS_ERROR,
            SignatureStatus::TofuConflict => gmime_sys::GMIME_SIGNATURE_STATUS_TOFU_CONFLICT,
            SignatureStatus::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeSignatureStatus> for SignatureStatus {
    fn from_glib(value: gmime_sys::GMimeSignatureStatus) -> Self {
        match value {
            1 => SignatureStatus::Valid,
            2 => SignatureStatus::Green,
            4 => SignatureStatus::Red,
            16 => SignatureStatus::KeyRevoked,
            32 => SignatureStatus::KeyExpired,
            64 => SignatureStatus::SigExpired,
            128 => SignatureStatus::KeyMissing,
            256 => SignatureStatus::CrlMissing,
            512 => SignatureStatus::CrlTooOld,
            1024 => SignatureStatus::BadPolicy,
            2048 => SignatureStatus::SysError,
            4096 => SignatureStatus::TofuConflict,
            value => SignatureStatus::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum StreamBufferMode {
    Read,
    Write,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StreamBufferMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamBufferMode::{}", match *self {
            StreamBufferMode::Read => "Read",
            StreamBufferMode::Write => "Write",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for StreamBufferMode {
    type GlibType = gmime_sys::GMimeStreamBufferMode;

    fn to_glib(&self) -> gmime_sys::GMimeStreamBufferMode {
        match *self {
            StreamBufferMode::Read => gmime_sys::GMIME_STREAM_BUFFER_BLOCK_READ,
            StreamBufferMode::Write => gmime_sys::GMIME_STREAM_BUFFER_BLOCK_WRITE,
            StreamBufferMode::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeStreamBufferMode> for StreamBufferMode {
    fn from_glib(value: gmime_sys::GMimeStreamBufferMode) -> Self {
        match value {
            0 => StreamBufferMode::Read,
            1 => StreamBufferMode::Write,
            value => StreamBufferMode::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum Trust {
    Unknown,
    Undefined,
    Never,
    Marginal,
    Full,
    Ultimate,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Trust {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Trust::{}", match *self {
            Trust::Unknown => "Unknown",
            Trust::Undefined => "Undefined",
            Trust::Never => "Never",
            Trust::Marginal => "Marginal",
            Trust::Full => "Full",
            Trust::Ultimate => "Ultimate",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Trust {
    type GlibType = gmime_sys::GMimeTrust;

    fn to_glib(&self) -> gmime_sys::GMimeTrust {
        match *self {
            Trust::Unknown => gmime_sys::GMIME_TRUST_UNKNOWN,
            Trust::Undefined => gmime_sys::GMIME_TRUST_UNDEFINED,
            Trust::Never => gmime_sys::GMIME_TRUST_NEVER,
            Trust::Marginal => gmime_sys::GMIME_TRUST_MARGINAL,
            Trust::Full => gmime_sys::GMIME_TRUST_FULL,
            Trust::Ultimate => gmime_sys::GMIME_TRUST_ULTIMATE,
            Trust::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeTrust> for Trust {
    fn from_glib(value: gmime_sys::GMimeTrust) -> Self {
        match value {
            0 => Trust::Unknown,
            1 => Trust::Undefined,
            2 => Trust::Never,
            3 => Trust::Marginal,
            4 => Trust::Full,
            5 => Trust::Ultimate,
            value => Trust::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum Validity {
    Unknown,
    Undefined,
    Never,
    Marginal,
    Full,
    Ultimate,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Validity {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Validity::{}", match *self {
            Validity::Unknown => "Unknown",
            Validity::Undefined => "Undefined",
            Validity::Never => "Never",
            Validity::Marginal => "Marginal",
            Validity::Full => "Full",
            Validity::Ultimate => "Ultimate",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for Validity {
    type GlibType = gmime_sys::GMimeValidity;

    fn to_glib(&self) -> gmime_sys::GMimeValidity {
        match *self {
            Validity::Unknown => gmime_sys::GMIME_VALIDITY_UNKNOWN,
            Validity::Undefined => gmime_sys::GMIME_VALIDITY_UNDEFINED,
            Validity::Never => gmime_sys::GMIME_VALIDITY_NEVER,
            Validity::Marginal => gmime_sys::GMIME_VALIDITY_MARGINAL,
            Validity::Full => gmime_sys::GMIME_VALIDITY_FULL,
            Validity::Ultimate => gmime_sys::GMIME_VALIDITY_ULTIMATE,
            Validity::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeValidity> for Validity {
    fn from_glib(value: gmime_sys::GMimeValidity) -> Self {
        match value {
            0 => Validity::Unknown,
            1 => Validity::Undefined,
            2 => Validity::Never,
            3 => Validity::Marginal,
            4 => Validity::Full,
            5 => Validity::Ultimate,
            value => Validity::__Unknown(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
pub enum VerifyFlags {
    VerifyNone,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for VerifyFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "VerifyFlags::{}", match *self {
            VerifyFlags::VerifyNone => "VerifyNone",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl ToGlib for VerifyFlags {
    type GlibType = gmime_sys::GMimeVerifyFlags;

    fn to_glib(&self) -> gmime_sys::GMimeVerifyFlags {
        match *self {
            VerifyFlags::VerifyNone => gmime_sys::GMIME_VERIFY_NONE,
            VerifyFlags::__Unknown(value) => value
        }
    }
}

#[doc(hidden)]
impl FromGlib<gmime_sys::GMimeVerifyFlags> for VerifyFlags {
    fn from_glib(value: gmime_sys::GMimeVerifyFlags) -> Self {
        match value {
            0 => VerifyFlags::VerifyNone,
            value => VerifyFlags::__Unknown(value),
        }
    }
}

