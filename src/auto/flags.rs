// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use ffi;
use glib::translate::*;

bitflags! {
    pub struct DecryptFlags: u32 {
        const NONE = 0;
        const EXPORT_SESSION_KEY = 1;
    }
}

#[doc(hidden)]
impl ToGlib for DecryptFlags {
    type GlibType = ffi::GMimeDecryptFlags;

    fn to_glib(&self) -> ffi::GMimeDecryptFlags {
        ffi::GMimeDecryptFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GMimeDecryptFlags> for DecryptFlags {
    fn from_glib(value: ffi::GMimeDecryptFlags) -> DecryptFlags {
        DecryptFlags::from_bits_truncate(value.bits())
    }
}

bitflags! {
    pub struct FilterBestFlags: u32 {
        const CHARSET = 1;
        const ENCODING = 2;
    }
}

#[doc(hidden)]
impl ToGlib for FilterBestFlags {
    type GlibType = ffi::GMimeFilterBestFlags;

    fn to_glib(&self) -> ffi::GMimeFilterBestFlags {
        ffi::GMimeFilterBestFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GMimeFilterBestFlags> for FilterBestFlags {
    fn from_glib(value: ffi::GMimeFilterBestFlags) -> FilterBestFlags {
        FilterBestFlags::from_bits_truncate(value.bits())
    }
}

