// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Object;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Multipart(Object<ffi::GMimeMultipart, ffi::GMimeMultipartClass>): Object;

    match fn {
        get_type => || ffi::g_mime_multipart_get_type(),
    }
}

impl Multipart {
    pub fn new() -> Multipart {
        unsafe {
            from_glib_full(ffi::g_mime_multipart_new())
        }
    }

    pub fn new_with_subtype(subtype: &str) -> Multipart {
        unsafe {
            from_glib_full(ffi::g_mime_multipart_new_with_subtype(subtype.to_glib_none().0))
        }
    }
}

impl Default for Multipart {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MultipartExt {
    fn add<P: IsA<Object>>(&self, part: &P);

    fn clear(&self);

    fn contains<P: IsA<Object>>(&self, part: &P) -> bool;

    //fn foreach<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, callback: /*Unknown conversion*//*Unimplemented*/ObjectForeachFunc, user_data: P);

    fn get_boundary(&self) -> Option<String>;

    fn get_count(&self) -> i32;

    fn get_epilogue(&self) -> Option<String>;

    fn get_part(&self, index: i32) -> Option<Object>;

    fn get_prologue(&self) -> Option<String>;

    fn get_subpart_from_content_id(&self, content_id: &str) -> Option<Object>;

    fn index_of<P: IsA<Object>>(&self, part: &P) -> i32;

    fn insert<P: IsA<Object>>(&self, index: i32, part: &P);

    fn remove<P: IsA<Object>>(&self, part: &P) -> bool;

    fn remove_at(&self, index: i32) -> Option<Object>;

    fn replace<P: IsA<Object>>(&self, index: i32, replacement: &P) -> Option<Object>;

    fn set_boundary(&self, boundary: &str);

    fn set_epilogue(&self, epilogue: &str);

    fn set_prologue(&self, prologue: &str);
}

impl<O: IsA<Multipart>> MultipartExt for O {
    fn add<P: IsA<Object>>(&self, part: &P) {
        unsafe {
            ffi::g_mime_multipart_add(self.to_glib_none().0, part.to_glib_none().0);
        }
    }

    fn clear(&self) {
        unsafe {
            ffi::g_mime_multipart_clear(self.to_glib_none().0);
        }
    }

    fn contains<P: IsA<Object>>(&self, part: &P) -> bool {
        unsafe {
            from_glib(ffi::g_mime_multipart_contains(self.to_glib_none().0, part.to_glib_none().0))
        }
    }

    //fn foreach<P: Into<Option</*Unimplemented*/Fundamental: Pointer>>>(&self, callback: /*Unknown conversion*//*Unimplemented*/ObjectForeachFunc, user_data: P) {
    //    unsafe { TODO: call ffi::g_mime_multipart_foreach() }
    //}

    fn get_boundary(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_multipart_get_boundary(self.to_glib_none().0))
        }
    }

    fn get_count(&self) -> i32 {
        unsafe {
            ffi::g_mime_multipart_get_count(self.to_glib_none().0)
        }
    }

    fn get_epilogue(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_multipart_get_epilogue(self.to_glib_none().0))
        }
    }

    fn get_part(&self, index: i32) -> Option<Object> {
        unsafe {
            from_glib_none(ffi::g_mime_multipart_get_part(self.to_glib_none().0, index))
        }
    }

    fn get_prologue(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_multipart_get_prologue(self.to_glib_none().0))
        }
    }

    fn get_subpart_from_content_id(&self, content_id: &str) -> Option<Object> {
        unsafe {
            from_glib_none(ffi::g_mime_multipart_get_subpart_from_content_id(self.to_glib_none().0, content_id.to_glib_none().0))
        }
    }

    fn index_of<P: IsA<Object>>(&self, part: &P) -> i32 {
        unsafe {
            ffi::g_mime_multipart_index_of(self.to_glib_none().0, part.to_glib_none().0)
        }
    }

    fn insert<P: IsA<Object>>(&self, index: i32, part: &P) {
        unsafe {
            ffi::g_mime_multipart_insert(self.to_glib_none().0, index, part.to_glib_none().0);
        }
    }

    fn remove<P: IsA<Object>>(&self, part: &P) -> bool {
        unsafe {
            from_glib(ffi::g_mime_multipart_remove(self.to_glib_none().0, part.to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> Option<Object> {
        unsafe {
            from_glib_full(ffi::g_mime_multipart_remove_at(self.to_glib_none().0, index))
        }
    }

    fn replace<P: IsA<Object>>(&self, index: i32, replacement: &P) -> Option<Object> {
        unsafe {
            from_glib_full(ffi::g_mime_multipart_replace(self.to_glib_none().0, index, replacement.to_glib_none().0))
        }
    }

    fn set_boundary(&self, boundary: &str) {
        unsafe {
            ffi::g_mime_multipart_set_boundary(self.to_glib_none().0, boundary.to_glib_none().0);
        }
    }

    fn set_epilogue(&self, epilogue: &str) {
        unsafe {
            ffi::g_mime_multipart_set_epilogue(self.to_glib_none().0, epilogue.to_glib_none().0);
        }
    }

    fn set_prologue(&self, prologue: &str) {
        unsafe {
            ffi::g_mime_multipart_set_prologue(self.to_glib_none().0, prologue.to_glib_none().0);
        }
    }
}
