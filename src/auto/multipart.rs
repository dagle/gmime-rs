// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gmime_sys;
use std::fmt;
use Object;

glib_wrapper! {
    pub struct Multipart(Object<gmime_sys::GMimeMultipart, gmime_sys::GMimeMultipartClass, MultipartClass>) @extends Object;

    match fn {
        get_type => || gmime_sys::g_mime_multipart_get_type(),
    }
}

impl Multipart {
    pub fn new() -> Multipart {
        unsafe {
            from_glib_full(gmime_sys::g_mime_multipart_new())
        }
    }

    pub fn with_subtype(subtype: &str) -> Multipart {
        unsafe {
            from_glib_full(gmime_sys::g_mime_multipart_new_with_subtype(subtype.to_glib_none().0))
        }
    }
}

impl Default for Multipart {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MULTIPART: Option<&Multipart> = None;

pub trait MultipartExt: 'static {
    fn add<P: IsA<Object>>(&self, part: &P);

    fn clear(&self);

    fn contains<P: IsA<Object>>(&self, part: &P) -> bool;

    fn foreach<P: FnMut(&Object, &Object)>(&self, callback: P);

    fn get_boundary(&self) -> Option<GString>;

    fn get_count(&self) -> i32;

    fn get_epilogue(&self) -> Option<GString>;

    fn get_part(&self, index: i32) -> Option<Object>;

    fn get_prologue(&self) -> Option<GString>;

    fn get_subpart_from_content_id(&self, content_id: &str) -> Option<Object>;

    fn index_of<P: IsA<Object>>(&self, part: &P) -> i32;

    fn insert<P: IsA<Object>>(&self, index: i32, part: &P);

    fn remove<P: IsA<Object>>(&self, part: &P) -> bool;

    fn remove_at(&self, index: i32) -> Option<Object>;

    fn replace<P: IsA<Object>>(&self, index: i32, replacement: &P) -> Option<Object>;

    fn set_boundary(&self, boundary: &str);

    fn set_epilogue(&self, epilogue: &str);

    fn set_prologue(&self, prologue: &str);
}

impl<O: IsA<Multipart>> MultipartExt for O {
    fn add<P: IsA<Object>>(&self, part: &P) {
        unsafe {
            gmime_sys::g_mime_multipart_add(self.as_ref().to_glib_none().0, part.as_ref().to_glib_none().0);
        }
    }

    fn clear(&self) {
        unsafe {
            gmime_sys::g_mime_multipart_clear(self.as_ref().to_glib_none().0);
        }
    }

    fn contains<P: IsA<Object>>(&self, part: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_multipart_contains(self.as_ref().to_glib_none().0, part.as_ref().to_glib_none().0))
        }
    }

    fn foreach<P: FnMut(&Object, &Object)>(&self, callback: P) {
        let callback_data: P = callback;
        unsafe extern "C" fn callback_func<P: FnMut(&Object, &Object)>(parent: *mut gmime_sys::GMimeObject, part: *mut gmime_sys::GMimeObject, user_data: glib_sys::gpointer) {
            let parent = from_glib_borrow(parent);
            let part = from_glib_borrow(part);
            let callback: *mut P = user_data as *const _ as usize as *mut P;
            (*callback)(&parent, &part);
        }
        let callback = Some(callback_func::<P> as _);
        let super_callback0: &P = &callback_data;
        unsafe {
            gmime_sys::g_mime_multipart_foreach(self.as_ref().to_glib_none().0, callback, super_callback0 as *const _ as usize as *mut _);
        }
    }

    fn get_boundary(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_multipart_get_boundary(self.as_ref().to_glib_none().0))
        }
    }

    fn get_count(&self) -> i32 {
        unsafe {
            gmime_sys::g_mime_multipart_get_count(self.as_ref().to_glib_none().0)
        }
    }

    fn get_epilogue(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_multipart_get_epilogue(self.as_ref().to_glib_none().0))
        }
    }

    fn get_part(&self, index: i32) -> Option<Object> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_multipart_get_part(self.as_ref().to_glib_none().0, index))
        }
    }

    fn get_prologue(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_multipart_get_prologue(self.as_ref().to_glib_none().0))
        }
    }

    fn get_subpart_from_content_id(&self, content_id: &str) -> Option<Object> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_multipart_get_subpart_from_content_id(self.as_ref().to_glib_none().0, content_id.to_glib_none().0))
        }
    }

    fn index_of<P: IsA<Object>>(&self, part: &P) -> i32 {
        unsafe {
            gmime_sys::g_mime_multipart_index_of(self.as_ref().to_glib_none().0, part.as_ref().to_glib_none().0)
        }
    }

    fn insert<P: IsA<Object>>(&self, index: i32, part: &P) {
        unsafe {
            gmime_sys::g_mime_multipart_insert(self.as_ref().to_glib_none().0, index, part.as_ref().to_glib_none().0);
        }
    }

    fn remove<P: IsA<Object>>(&self, part: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_multipart_remove(self.as_ref().to_glib_none().0, part.as_ref().to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> Option<Object> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_multipart_remove_at(self.as_ref().to_glib_none().0, index))
        }
    }

    fn replace<P: IsA<Object>>(&self, index: i32, replacement: &P) -> Option<Object> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_multipart_replace(self.as_ref().to_glib_none().0, index, replacement.as_ref().to_glib_none().0))
        }
    }

    fn set_boundary(&self, boundary: &str) {
        unsafe {
            gmime_sys::g_mime_multipart_set_boundary(self.as_ref().to_glib_none().0, boundary.to_glib_none().0);
        }
    }

    fn set_epilogue(&self, epilogue: &str) {
        unsafe {
            gmime_sys::g_mime_multipart_set_epilogue(self.as_ref().to_glib_none().0, epilogue.to_glib_none().0);
        }
    }

    fn set_prologue(&self, prologue: &str) {
        unsafe {
            gmime_sys::g_mime_multipart_set_prologue(self.as_ref().to_glib_none().0, prologue.to_glib_none().0);
        }
    }
}

impl fmt::Display for Multipart {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Multipart")
    }
}
