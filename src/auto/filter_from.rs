// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Filter;
use crate::FilterFromMode;
use glib::object::Cast;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeFilterFrom")]
    pub struct FilterFrom(Object<ffi::GMimeFilterFrom, ffi::GMimeFilterFromClass>) @extends Filter;

    match fn {
        type_ => || ffi::g_mime_filter_from_get_type(),
    }
}

impl FilterFrom {
    #[doc(alias = "g_mime_filter_from_new")]
    pub fn new(mode: FilterFromMode) -> FilterFrom {
        assert_initialized_main_thread!();
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_from_new(mode.into_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_FROM: Option<&FilterFrom> = None;

impl fmt::Display for FilterFrom {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FilterFrom")
    }
}
