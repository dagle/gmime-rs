// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Filter;
use FilterGZipMode;
use ffi;
#[cfg(any(feature = "v3_2", feature = "dox"))]
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct FilterGZip(Object<ffi::GMimeFilterGZip, ffi::GMimeFilterGZipClass, FilterGZipClass>) @extends Filter;

    match fn {
        get_type => || ffi::g_mime_filter_gzip_get_type(),
    }
}

impl FilterGZip {
    pub fn new(mode: FilterGZipMode, level: i32) -> FilterGZip {
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_gzip_new(mode.to_glib(), level)).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_GZIP: Option<&FilterGZip> = None;

pub trait FilterGZipExt: 'static {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_comment(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_filename(&self) -> Option<GString>;

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_comment(&self, comment: &str);

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_filename(&self, filename: &str);
}

impl<O: IsA<FilterGZip>> FilterGZipExt for O {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_comment(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_filter_gzip_get_comment(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_filename(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_filter_gzip_get_filename(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_comment(&self, comment: &str) {
        unsafe {
            ffi::g_mime_filter_gzip_set_comment(self.as_ref().to_glib_none().0, comment.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_filename(&self, filename: &str) {
        unsafe {
            ffi::g_mime_filter_gzip_set_filename(self.as_ref().to_glib_none().0, filename.to_glib_none().0);
        }
    }
}

impl fmt::Display for FilterGZip {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterGZip")
    }
}
