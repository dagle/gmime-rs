// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use Signature;

glib_wrapper! {
    pub struct SignatureList(Object<gmime_sys::GMimeSignatureList, gmime_sys::GMimeSignatureListClass, SignatureListClass>);

    match fn {
        get_type => || gmime_sys::g_mime_signature_list_get_type(),
    }
}

impl SignatureList {
    pub fn new() -> SignatureList {
        unsafe {
            from_glib_full(gmime_sys::g_mime_signature_list_new())
        }
    }
}

impl Default for SignatureList {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_SIGNATURE_LIST: Option<&SignatureList> = None;

pub trait SignatureListExt: 'static {
    fn add<P: IsA<Signature>>(&self, sig: &P) -> i32;

    fn clear(&self);

    fn contains<P: IsA<Signature>>(&self, sig: &P) -> bool;

    fn get_signature(&self, index: i32) -> Option<Signature>;

    fn index_of<P: IsA<Signature>>(&self, sig: &P) -> i32;

    fn insert<P: IsA<Signature>>(&self, index: i32, sig: &P);

    fn length(&self) -> i32;

    fn remove<P: IsA<Signature>>(&self, sig: &P) -> bool;

    fn remove_at(&self, index: i32) -> bool;

    fn set_signature<P: IsA<Signature>>(&self, index: i32, sig: &P);
}

impl<O: IsA<SignatureList>> SignatureListExt for O {
    fn add<P: IsA<Signature>>(&self, sig: &P) -> i32 {
        unsafe {
            gmime_sys::g_mime_signature_list_add(self.as_ref().to_glib_none().0, sig.as_ref().to_glib_none().0)
        }
    }

    fn clear(&self) {
        unsafe {
            gmime_sys::g_mime_signature_list_clear(self.as_ref().to_glib_none().0);
        }
    }

    fn contains<P: IsA<Signature>>(&self, sig: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_signature_list_contains(self.as_ref().to_glib_none().0, sig.as_ref().to_glib_none().0))
        }
    }

    fn get_signature(&self, index: i32) -> Option<Signature> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_signature_list_get_signature(self.as_ref().to_glib_none().0, index))
        }
    }

    fn index_of<P: IsA<Signature>>(&self, sig: &P) -> i32 {
        unsafe {
            gmime_sys::g_mime_signature_list_index_of(self.as_ref().to_glib_none().0, sig.as_ref().to_glib_none().0)
        }
    }

    fn insert<P: IsA<Signature>>(&self, index: i32, sig: &P) {
        unsafe {
            gmime_sys::g_mime_signature_list_insert(self.as_ref().to_glib_none().0, index, sig.as_ref().to_glib_none().0);
        }
    }

    fn length(&self) -> i32 {
        unsafe {
            gmime_sys::g_mime_signature_list_length(self.as_ref().to_glib_none().0)
        }
    }

    fn remove<P: IsA<Signature>>(&self, sig: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_signature_list_remove(self.as_ref().to_glib_none().0, sig.as_ref().to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_signature_list_remove_at(self.as_ref().to_glib_none().0, index))
        }
    }

    fn set_signature<P: IsA<Signature>>(&self, index: i32, sig: &P) {
        unsafe {
            gmime_sys::g_mime_signature_list_set_signature(self.as_ref().to_glib_none().0, index, sig.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for SignatureList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SignatureList")
    }
}
