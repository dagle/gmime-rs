// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Signature;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct SignatureList(Object<ffi::GMimeSignatureList, ffi::GMimeSignatureListClass>);

    match fn {
        get_type => || ffi::g_mime_signature_list_get_type(),
    }
}

impl SignatureList {
    pub fn new() -> SignatureList {
        unsafe {
            from_glib_full(ffi::g_mime_signature_list_new())
        }
    }
}

impl Default for SignatureList {
    fn default() -> Self {
        Self::new()
    }
}

pub trait SignatureListExt {
    fn add(&self, sig: &Signature) -> i32;

    fn clear(&self);

    fn contains(&self, sig: &Signature) -> bool;

    fn get_signature(&self, index: i32) -> Option<Signature>;

    fn index_of(&self, sig: &Signature) -> i32;

    fn insert(&self, index: i32, sig: &Signature);

    fn length(&self) -> i32;

    fn remove(&self, sig: &Signature) -> bool;

    fn remove_at(&self, index: i32) -> bool;

    fn set_signature(&self, index: i32, sig: &Signature);
}

impl<O: IsA<SignatureList>> SignatureListExt for O {
    fn add(&self, sig: &Signature) -> i32 {
        unsafe {
            ffi::g_mime_signature_list_add(self.to_glib_none().0, sig.to_glib_none().0)
        }
    }

    fn clear(&self) {
        unsafe {
            ffi::g_mime_signature_list_clear(self.to_glib_none().0);
        }
    }

    fn contains(&self, sig: &Signature) -> bool {
        unsafe {
            from_glib(ffi::g_mime_signature_list_contains(self.to_glib_none().0, sig.to_glib_none().0))
        }
    }

    fn get_signature(&self, index: i32) -> Option<Signature> {
        unsafe {
            from_glib_none(ffi::g_mime_signature_list_get_signature(self.to_glib_none().0, index))
        }
    }

    fn index_of(&self, sig: &Signature) -> i32 {
        unsafe {
            ffi::g_mime_signature_list_index_of(self.to_glib_none().0, sig.to_glib_none().0)
        }
    }

    fn insert(&self, index: i32, sig: &Signature) {
        unsafe {
            ffi::g_mime_signature_list_insert(self.to_glib_none().0, index, sig.to_glib_none().0);
        }
    }

    fn length(&self) -> i32 {
        unsafe {
            ffi::g_mime_signature_list_length(self.to_glib_none().0)
        }
    }

    fn remove(&self, sig: &Signature) -> bool {
        unsafe {
            from_glib(ffi::g_mime_signature_list_remove(self.to_glib_none().0, sig.to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> bool {
        unsafe {
            from_glib(ffi::g_mime_signature_list_remove_at(self.to_glib_none().0, index))
        }
    }

    fn set_signature(&self, index: i32, sig: &Signature) {
        unsafe {
            ffi::g_mime_signature_list_set_signature(self.to_glib_none().0, index, sig.to_glib_none().0);
        }
    }
}
