// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Filter;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct FilterOpenPGP(Object<ffi::GMimeFilterOpenPGP, ffi::GMimeFilterOpenPGPClass>): Filter;

    match fn {
        get_type => || ffi::g_mime_filter_openpgp_get_type(),
    }
}

impl FilterOpenPGP {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    pub fn new() -> FilterOpenPGP {
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_openpgp_new()).downcast_unchecked()
        }
    }
}

#[cfg(any(feature = "v3_2", feature = "dox"))]
impl Default for FilterOpenPGP {
    fn default() -> Self {
        Self::new()
    }
}

pub trait FilterOpenPGPExt {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_begin_offset(&self) -> i64;

    //#[cfg(any(feature = "v3_2", feature = "dox"))]
    //fn get_data_type(&self) -> /*Ignored*/OpenPGPData;

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_end_offset(&self) -> i64;
}

impl<O: IsA<FilterOpenPGP>> FilterOpenPGPExt for O {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_begin_offset(&self) -> i64 {
        unsafe {
            ffi::g_mime_filter_openpgp_get_begin_offset(self.to_glib_none().0)
        }
    }

    //#[cfg(any(feature = "v3_2", feature = "dox"))]
    //fn get_data_type(&self) -> /*Ignored*/OpenPGPData {
    //    unsafe { TODO: call ffi::g_mime_filter_openpgp_get_data_type() }
    //}

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_end_offset(&self) -> i64 {
        unsafe {
            ffi::g_mime_filter_openpgp_get_end_offset(self.to_glib_none().0)
        }
    }
}
