// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use AutocryptHeaderList;
use ContentDisposition;
use ContentType;
use EncodingConstraint;
use HeaderList;
use InternetAddressList;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Object(Object<ffi::GMimeObject, ffi::GMimeObjectClass>);

    match fn {
        get_type => || ffi::g_mime_object_get_type(),
    }
}

impl Object {
    //pub fn new<'a, P: Into<Option<&'a /*Ignored*/ParserOptions>>>(options: P, content_type: &ContentType) -> Object {
    //    unsafe { TODO: call ffi::g_mime_object_new() }
    //}

    //pub fn new_type<'a, P: Into<Option<&'a /*Ignored*/ParserOptions>>>(options: P, type_: &str, subtype: &str) -> Object {
    //    unsafe { TODO: call ffi::g_mime_object_new_type() }
    //}

    pub fn register_type(type_: &str, subtype: &str, object_type: glib::types::Type) {
        unsafe {
            ffi::g_mime_object_register_type(type_.to_glib_none().0, subtype.to_glib_none().0, object_type.to_glib());
        }
    }

    pub fn type_registry_init() {
        unsafe {
            ffi::g_mime_object_type_registry_init();
        }
    }

    pub fn type_registry_shutdown() {
        unsafe {
            ffi::g_mime_object_type_registry_shutdown();
        }
    }
}

pub trait ObjectExt {
    fn append_header(&self, header: &str, value: &str, charset: &str);

    fn encode(&self, constraint: EncodingConstraint);

    fn get_autocrypt_headers(&self, effective_date: &glib::DateTime, matchheader: &str, addresses: &InternetAddressList, keep_incomplete: bool) -> Option<AutocryptHeaderList>;

    fn get_content_disposition(&self) -> Option<ContentDisposition>;

    fn get_content_disposition_parameter(&self, name: &str) -> Option<String>;

    fn get_content_id(&self) -> Option<String>;

    fn get_content_type(&self) -> Option<ContentType>;

    fn get_content_type_parameter(&self, name: &str) -> Option<String>;

    fn get_disposition(&self) -> Option<String>;

    fn get_header(&self, header: &str) -> Option<String>;

    fn get_header_list(&self) -> Option<HeaderList>;

    //fn get_headers<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P) -> Option<String>;

    fn prepend_header(&self, header: &str, value: &str, charset: &str);

    fn remove_header(&self, header: &str) -> bool;

    fn set_content_disposition(&self, disposition: &ContentDisposition);

    fn set_content_disposition_parameter(&self, name: &str, value: &str);

    fn set_content_id(&self, content_id: &str);

    fn set_content_type(&self, content_type: &ContentType);

    fn set_content_type_parameter(&self, name: &str, value: &str);

    fn set_disposition(&self, disposition: &str);

    fn set_header(&self, header: &str, value: &str, charset: &str);

    //fn to_string<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P) -> String;

    //fn write_to_stream<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize;
}

impl<O: IsA<Object>> ObjectExt for O {
    fn append_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_append_header(self.to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn encode(&self, constraint: EncodingConstraint) {
        unsafe {
            ffi::g_mime_object_encode(self.to_glib_none().0, constraint.to_glib());
        }
    }

    fn get_autocrypt_headers(&self, effective_date: &glib::DateTime, matchheader: &str, addresses: &InternetAddressList, keep_incomplete: bool) -> Option<AutocryptHeaderList> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_autocrypt_headers(self.to_glib_none().0, effective_date.to_glib_none().0, matchheader.to_glib_none().0, addresses.to_glib_none().0, keep_incomplete.to_glib()))
        }
    }

    fn get_content_disposition(&self) -> Option<ContentDisposition> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_disposition(self.to_glib_none().0))
        }
    }

    fn get_content_disposition_parameter(&self, name: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_disposition_parameter(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_content_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_id(self.to_glib_none().0))
        }
    }

    fn get_content_type(&self) -> Option<ContentType> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_type(self.to_glib_none().0))
        }
    }

    fn get_content_type_parameter(&self, name: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_type_parameter(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_disposition(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_disposition(self.to_glib_none().0))
        }
    }

    fn get_header(&self, header: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_header(self.to_glib_none().0, header.to_glib_none().0))
        }
    }

    fn get_header_list(&self) -> Option<HeaderList> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_header_list(self.to_glib_none().0))
        }
    }

    //fn get_headers<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_object_get_headers() }
    //}

    fn prepend_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_prepend_header(self.to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn remove_header(&self, header: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_object_remove_header(self.to_glib_none().0, header.to_glib_none().0))
        }
    }

    fn set_content_disposition(&self, disposition: &ContentDisposition) {
        unsafe {
            ffi::g_mime_object_set_content_disposition(self.to_glib_none().0, disposition.to_glib_none().0);
        }
    }

    fn set_content_disposition_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_object_set_content_disposition_parameter(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_content_id(&self, content_id: &str) {
        unsafe {
            ffi::g_mime_object_set_content_id(self.to_glib_none().0, content_id.to_glib_none().0);
        }
    }

    fn set_content_type(&self, content_type: &ContentType) {
        unsafe {
            ffi::g_mime_object_set_content_type(self.to_glib_none().0, content_type.to_glib_none().0);
        }
    }

    fn set_content_type_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_object_set_content_type_parameter(self.to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_disposition(&self, disposition: &str) {
        unsafe {
            ffi::g_mime_object_set_disposition(self.to_glib_none().0, disposition.to_glib_none().0);
        }
    }

    fn set_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_set_header(self.to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    //fn to_string<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P) -> String {
    //    unsafe { TODO: call ffi::g_mime_object_to_string() }
    //}

    //fn write_to_stream<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize {
    //    unsafe { TODO: call ffi::g_mime_object_write_to_stream() }
    //}
}
