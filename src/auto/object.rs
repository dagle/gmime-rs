// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use AutocryptHeaderList;
use ContentDisposition;
use ContentType;
use EncodingConstraint;
use FormatOptions;
use HeaderList;
use InternetAddressList;
use ParserOptions;
use Stream;
use ffi;
use glib;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct Object(Object<ffi::GMimeObject, ffi::GMimeObjectClass, ObjectClass>);

    match fn {
        get_type => || ffi::g_mime_object_get_type(),
    }
}

impl Object {
    pub fn new<'a, P: Into<Option<&'a ParserOptions>>, Q: IsA<ContentType>>(options: P, content_type: &Q) -> Object {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_object_new(mut_override(options.to_glib_none().0), content_type.as_ref().to_glib_none().0))
        }
    }

    pub fn new_type<'a, P: Into<Option<&'a ParserOptions>>>(options: P, type_: &str, subtype: &str) -> Object {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_object_new_type(mut_override(options.to_glib_none().0), type_.to_glib_none().0, subtype.to_glib_none().0))
        }
    }

    pub fn register_type(type_: &str, subtype: &str, object_type: glib::types::Type) {
        unsafe {
            ffi::g_mime_object_register_type(type_.to_glib_none().0, subtype.to_glib_none().0, object_type.to_glib());
        }
    }

    pub fn type_registry_init() {
        unsafe {
            ffi::g_mime_object_type_registry_init();
        }
    }

    pub fn type_registry_shutdown() {
        unsafe {
            ffi::g_mime_object_type_registry_shutdown();
        }
    }
}

pub const NONE_OBJECT: Option<&Object> = None;

pub trait ObjectExt: 'static {
    fn append_header(&self, header: &str, value: &str, charset: &str);

    fn encode(&self, constraint: EncodingConstraint);

    fn get_autocrypt_headers<P: IsA<InternetAddressList>>(&self, effective_date: &glib::DateTime, matchheader: &str, addresses: &P, keep_incomplete: bool) -> Option<AutocryptHeaderList>;

    fn get_content_disposition(&self) -> Option<ContentDisposition>;

    fn get_content_disposition_parameter(&self, name: &str) -> Option<GString>;

    fn get_content_id(&self) -> Option<GString>;

    fn get_content_type(&self) -> Option<ContentType>;

    fn get_content_type_parameter(&self, name: &str) -> Option<GString>;

    fn get_disposition(&self) -> Option<GString>;

    fn get_header(&self, header: &str) -> Option<GString>;

    fn get_header_list(&self) -> Option<HeaderList>;

    fn get_headers<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> Option<GString>;

    fn prepend_header(&self, header: &str, value: &str, charset: &str);

    fn remove_header(&self, header: &str) -> bool;

    fn set_content_disposition<P: IsA<ContentDisposition>>(&self, disposition: &P);

    fn set_content_disposition_parameter(&self, name: &str, value: &str);

    fn set_content_id(&self, content_id: &str);

    fn set_content_type<P: IsA<ContentType>>(&self, content_type: &P);

    fn set_content_type_parameter(&self, name: &str, value: &str);

    fn set_disposition(&self, disposition: &str);

    fn set_header(&self, header: &str, value: &str, charset: &str);

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> GString;

    fn write_to_stream<'a, P: Into<Option<&'a FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize;
}

impl<O: IsA<Object>> ObjectExt for O {
    fn append_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_append_header(self.as_ref().to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn encode(&self, constraint: EncodingConstraint) {
        unsafe {
            ffi::g_mime_object_encode(self.as_ref().to_glib_none().0, constraint.to_glib());
        }
    }

    fn get_autocrypt_headers<P: IsA<InternetAddressList>>(&self, effective_date: &glib::DateTime, matchheader: &str, addresses: &P, keep_incomplete: bool) -> Option<AutocryptHeaderList> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_autocrypt_headers(self.as_ref().to_glib_none().0, effective_date.to_glib_none().0, matchheader.to_glib_none().0, addresses.as_ref().to_glib_none().0, keep_incomplete.to_glib()))
        }
    }

    fn get_content_disposition(&self) -> Option<ContentDisposition> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_disposition(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_disposition_parameter(&self, name: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_disposition_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_content_id(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_id(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_type(&self) -> Option<ContentType> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_type_parameter(&self, name: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_content_type_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_disposition(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_disposition(self.as_ref().to_glib_none().0))
        }
    }

    fn get_header(&self, header: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_header(self.as_ref().to_glib_none().0, header.to_glib_none().0))
        }
    }

    fn get_header_list(&self) -> Option<HeaderList> {
        unsafe {
            from_glib_none(ffi::g_mime_object_get_header_list(self.as_ref().to_glib_none().0))
        }
    }

    fn get_headers<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> Option<GString> {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_object_get_headers(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn prepend_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_prepend_header(self.as_ref().to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn remove_header(&self, header: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_object_remove_header(self.as_ref().to_glib_none().0, header.to_glib_none().0))
        }
    }

    fn set_content_disposition<P: IsA<ContentDisposition>>(&self, disposition: &P) {
        unsafe {
            ffi::g_mime_object_set_content_disposition(self.as_ref().to_glib_none().0, disposition.as_ref().to_glib_none().0);
        }
    }

    fn set_content_disposition_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_object_set_content_disposition_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_content_id(&self, content_id: &str) {
        unsafe {
            ffi::g_mime_object_set_content_id(self.as_ref().to_glib_none().0, content_id.to_glib_none().0);
        }
    }

    fn set_content_type<P: IsA<ContentType>>(&self, content_type: &P) {
        unsafe {
            ffi::g_mime_object_set_content_type(self.as_ref().to_glib_none().0, content_type.as_ref().to_glib_none().0);
        }
    }

    fn set_content_type_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_object_set_content_type_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_disposition(&self, disposition: &str) {
        unsafe {
            ffi::g_mime_object_set_disposition(self.as_ref().to_glib_none().0, disposition.to_glib_none().0);
        }
    }

    fn set_header(&self, header: &str, value: &str, charset: &str) {
        unsafe {
            ffi::g_mime_object_set_header(self.as_ref().to_glib_none().0, header.to_glib_none().0, value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> GString {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_object_to_string(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn write_to_stream<'a, P: Into<Option<&'a FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize {
        let options = options.into();
        unsafe {
            ffi::g_mime_object_write_to_stream(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), stream.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Object")
    }
}
