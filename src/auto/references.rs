// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use gmime_sys;
use ParserOptions;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct References(Boxed<gmime_sys::GMimeReferences>);

    match fn {
        copy => |ptr| gmime_sys::g_mime_references_copy(mut_override(ptr)),
        free => |ptr| gmime_sys::g_mime_references_free(ptr),
        get_type => || gmime_sys::g_mime_references_get_type(),
    }
}

impl References {
    pub fn new() -> References {
        unsafe {
            from_glib_full(gmime_sys::g_mime_references_new())
        }
    }

    pub fn append(&mut self, msgid: &str) {
        unsafe {
            gmime_sys::g_mime_references_append(self.to_glib_none_mut().0, msgid.to_glib_none().0);
        }
    }

    pub fn clear(&mut self) {
        unsafe {
            gmime_sys::g_mime_references_clear(self.to_glib_none_mut().0);
        }
    }

    pub fn get_message_id(&mut self, index: i32) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_references_get_message_id(self.to_glib_none_mut().0, index))
        }
    }

    pub fn length(&mut self) -> i32 {
        unsafe {
            gmime_sys::g_mime_references_length(self.to_glib_none_mut().0)
        }
    }

    pub fn set_message_id(&mut self, index: i32, msgid: &str) {
        unsafe {
            gmime_sys::g_mime_references_set_message_id(self.to_glib_none_mut().0, index, msgid.to_glib_none().0);
        }
    }

    pub fn parse(options: Option<&mut ParserOptions>, text: &str) -> Option<References> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_references_parse(options.to_glib_none_mut().0, text.to_glib_none().0))
        }
    }
}

impl Default for References {
    fn default() -> Self {
        Self::new()
    }
}
