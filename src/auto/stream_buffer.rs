// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Stream;
use crate::StreamBufferMode;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeStreamBuffer")]
    pub struct StreamBuffer(Object<ffi::GMimeStreamBuffer, ffi::GMimeStreamBufferClass>) @extends Stream;

    match fn {
        type_ => || ffi::g_mime_stream_buffer_get_type(),
    }
}

impl StreamBuffer {
    #[doc(alias = "g_mime_stream_buffer_new")]
    pub fn new(source: &impl IsA<Stream>, mode: StreamBufferMode) -> StreamBuffer {
        skip_assert_initialized!();
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_buffer_new(
                source.as_ref().to_glib_none().0,
                mode.into_glib(),
            ))
            .unsafe_cast()
        }
    }
}

pub const NONE_STREAM_BUFFER: Option<&StreamBuffer> = None;

impl fmt::Display for StreamBuffer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StreamBuffer")
    }
}
