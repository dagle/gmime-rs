// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use std::ptr;
use CryptoContext;
use DecryptFlags;
use DecryptResult;
use EncryptFlags;
use Multipart;
use Object;

glib_wrapper! {
    pub struct MultipartEncrypted(Object<gmime_sys::GMimeMultipartEncrypted, gmime_sys::GMimeMultipartEncryptedClass, MultipartEncryptedClass>) @extends Multipart, Object;

    match fn {
        get_type => || gmime_sys::g_mime_multipart_encrypted_get_type(),
    }
}

impl MultipartEncrypted {
    pub fn new() -> MultipartEncrypted {
        unsafe {
            from_glib_full(gmime_sys::g_mime_multipart_encrypted_new())
        }
    }

    pub fn encrypt<P: IsA<CryptoContext>, Q: IsA<Object>>(ctx: &P, entity: &Q, sign: bool, userid: Option<&str>, flags: EncryptFlags, recipients: &[&str]) -> Result<Option<MultipartEncrypted>, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gmime_sys::g_mime_multipart_encrypted_encrypt(ctx.as_ref().to_glib_none().0, entity.as_ref().to_glib_none().0, sign.to_glib(), userid.to_glib_none().0, flags.to_glib(), recipients.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

impl Default for MultipartEncrypted {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_MULTIPART_ENCRYPTED: Option<&MultipartEncrypted> = None;

pub trait MultipartEncryptedExt: 'static {
    fn decrypt(&self, flags: DecryptFlags, session_key: &str) -> Result<(Option<Object>, DecryptResult), glib::Error>;
}

impl<O: IsA<MultipartEncrypted>> MultipartEncryptedExt for O {
    fn decrypt(&self, flags: DecryptFlags, session_key: &str) -> Result<(Option<Object>, DecryptResult), glib::Error> {
        unsafe {
            let mut result = ptr::null_mut();
            let mut error = ptr::null_mut();
            let ret = gmime_sys::g_mime_multipart_encrypted_decrypt(self.as_ref().to_glib_none().0, flags.to_glib(), session_key.to_glib_none().0, &mut result, &mut error);
            if error.is_null() { Ok((from_glib_full(ret), from_glib_full(result))) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for MultipartEncrypted {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MultipartEncrypted")
    }
}
