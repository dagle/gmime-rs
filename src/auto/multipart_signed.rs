// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Multipart;
use Object;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct MultipartSigned(Object<ffi::GMimeMultipartSigned, ffi::GMimeMultipartSignedClass>): Multipart, Object;

    match fn {
        get_type => || ffi::g_mime_multipart_signed_get_type(),
    }
}

impl MultipartSigned {
    pub fn new() -> MultipartSigned {
        unsafe {
            from_glib_full(ffi::g_mime_multipart_signed_new())
        }
    }

    //pub fn sign<P: IsA<CryptoContext>, Q: IsA<Object>>(ctx: &P, entity: &Q, userid: &str, error: /*Ignored*/Option<Error>) -> Option<MultipartSigned> {
    //    unsafe { TODO: call ffi::g_mime_multipart_signed_sign() }
    //}
}

impl Default for MultipartSigned {
    fn default() -> Self {
        Self::new()
    }
}

pub trait MultipartSignedExt {
    //fn verify(&self, flags: /*Ignored*/VerifyFlags, error: /*Ignored*/Option<Error>) -> Option<SignatureList>;
}

impl<O: IsA<MultipartSigned>> MultipartSignedExt for O {
    //fn verify(&self, flags: /*Ignored*/VerifyFlags, error: /*Ignored*/Option<Error>) -> Option<SignatureList> {
    //    unsafe { TODO: call ffi::g_mime_multipart_signed_verify() }
    //}
}
