// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use FormatOptions;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct InternetAddress(Object<ffi::InternetAddress, ffi::InternetAddressClass, InternetAddressClass>);

    match fn {
        get_type => || ffi::internet_address_get_type(),
    }
}

pub const NONE_INTERNET_ADDRESS: Option<&InternetAddress> = None;

pub trait InternetAddressExt: 'static {
    fn get_charset(&self) -> Option<GString>;

    fn get_name(&self) -> Option<GString>;

    fn set_charset<'a, P: Into<Option<&'a str>>>(&self, charset: P);

    fn set_name(&self, name: &str);

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P, encode: bool) -> GString;
}

impl<O: IsA<InternetAddress>> InternetAddressExt for O {
    fn get_charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::internet_address_get_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::internet_address_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn set_charset<'a, P: Into<Option<&'a str>>>(&self, charset: P) {
        let charset = charset.into();
        unsafe {
            ffi::internet_address_set_charset(self.as_ref().to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn set_name(&self, name: &str) {
        unsafe {
            ffi::internet_address_set_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn to_string<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P, encode: bool) -> GString {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::internet_address_to_string(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), encode.to_glib()))
        }
    }
}

impl fmt::Display for InternetAddress {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InternetAddress")
    }
}
