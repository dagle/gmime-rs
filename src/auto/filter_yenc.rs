// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Filter;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct FilterYenc(Object<ffi::GMimeFilterYenc, ffi::GMimeFilterYencClass>): Filter;

    match fn {
        get_type => || ffi::g_mime_filter_yenc_get_type(),
    }
}

impl FilterYenc {
    pub fn new(encode: bool) -> FilterYenc {
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_yenc_new(encode.to_glib())).downcast_unchecked()
        }
    }
}

pub trait FilterYencExt {
    fn get_crc(&self) -> u32;

    fn get_pcrc(&self) -> u32;

    fn set_crc(&self, crc: u32);

    fn set_state(&self, state: i32);
}

impl<O: IsA<FilterYenc>> FilterYencExt for O {
    fn get_crc(&self) -> u32 {
        unsafe {
            ffi::g_mime_filter_yenc_get_crc(self.to_glib_none().0)
        }
    }

    fn get_pcrc(&self) -> u32 {
        unsafe {
            ffi::g_mime_filter_yenc_get_pcrc(self.to_glib_none().0)
        }
    }

    fn set_crc(&self, crc: u32) {
        unsafe {
            ffi::g_mime_filter_yenc_set_crc(self.to_glib_none().0, crc);
        }
    }

    fn set_state(&self, state: i32) {
        unsafe {
            ffi::g_mime_filter_yenc_set_state(self.to_glib_none().0, state);
        }
    }
}
