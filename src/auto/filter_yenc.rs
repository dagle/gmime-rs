// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Filter;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeFilterYenc")]
    pub struct FilterYenc(Object<ffi::GMimeFilterYenc, ffi::GMimeFilterYencClass>) @extends Filter;

    match fn {
        type_ => || ffi::g_mime_filter_yenc_get_type(),
    }
}

impl FilterYenc {
    #[doc(alias = "g_mime_filter_yenc_new")]
    pub fn new(encode: bool) -> FilterYenc {
        assert_initialized_main_thread!();
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_yenc_new(encode.into_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_YENC: Option<&FilterYenc> = None;

pub trait FilterYencExt: 'static {
    #[doc(alias = "g_mime_filter_yenc_get_crc")]
    #[doc(alias = "get_crc")]
    fn crc(&self) -> u32;

    #[doc(alias = "g_mime_filter_yenc_get_pcrc")]
    #[doc(alias = "get_pcrc")]
    fn pcrc(&self) -> u32;

    #[doc(alias = "g_mime_filter_yenc_set_crc")]
    fn set_crc(&self, crc: u32);

    #[doc(alias = "g_mime_filter_yenc_set_state")]
    fn set_state(&self, state: i32);
}

impl<O: IsA<FilterYenc>> FilterYencExt for O {
    fn crc(&self) -> u32 {
        unsafe { ffi::g_mime_filter_yenc_get_crc(self.as_ref().to_glib_none().0) }
    }

    fn pcrc(&self) -> u32 {
        unsafe { ffi::g_mime_filter_yenc_get_pcrc(self.as_ref().to_glib_none().0) }
    }

    fn set_crc(&self, crc: u32) {
        unsafe {
            ffi::g_mime_filter_yenc_set_crc(self.as_ref().to_glib_none().0, crc);
        }
    }

    fn set_state(&self, state: i32) {
        unsafe {
            ffi::g_mime_filter_yenc_set_state(self.as_ref().to_glib_none().0, state);
        }
    }
}

impl fmt::Display for FilterYenc {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FilterYenc")
    }
}
