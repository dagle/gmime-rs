// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use Filter;

glib_wrapper! {
    pub struct FilterYenc(Object<gmime_sys::GMimeFilterYenc, gmime_sys::GMimeFilterYencClass, FilterYencClass>) @extends Filter;

    match fn {
        get_type => || gmime_sys::g_mime_filter_yenc_get_type(),
    }
}

impl FilterYenc {
    pub fn new(encode: bool) -> FilterYenc {
        unsafe {
            Filter::from_glib_full(gmime_sys::g_mime_filter_yenc_new(encode.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_YENC: Option<&FilterYenc> = None;

pub trait FilterYencExt: 'static {
    fn get_crc(&self) -> u32;

    fn get_pcrc(&self) -> u32;

    fn set_crc(&self, crc: u32);

    fn set_state(&self, state: i32);
}

impl<O: IsA<FilterYenc>> FilterYencExt for O {
    fn get_crc(&self) -> u32 {
        unsafe {
            gmime_sys::g_mime_filter_yenc_get_crc(self.as_ref().to_glib_none().0)
        }
    }

    fn get_pcrc(&self) -> u32 {
        unsafe {
            gmime_sys::g_mime_filter_yenc_get_pcrc(self.as_ref().to_glib_none().0)
        }
    }

    fn set_crc(&self, crc: u32) {
        unsafe {
            gmime_sys::g_mime_filter_yenc_set_crc(self.as_ref().to_glib_none().0, crc);
        }
    }

    fn set_state(&self, state: i32) {
        unsafe {
            gmime_sys::g_mime_filter_yenc_set_state(self.as_ref().to_glib_none().0, state);
        }
    }
}

impl fmt::Display for FilterYenc {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterYenc")
    }
}
