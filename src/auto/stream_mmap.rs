// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Stream;
use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct StreamMmap(Object<ffi::GMimeStreamMmap, ffi::GMimeStreamMmapClass, StreamMmapClass>) @extends Stream;

    match fn {
        get_type => || ffi::g_mime_stream_mmap_get_type(),
    }
}

impl StreamMmap {
    pub fn new(fd: i32, prot: i32, flags: i32) -> StreamMmap {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_mmap_new(fd, prot, flags)).unsafe_cast()
        }
    }

    pub fn new_with_bounds(fd: i32, prot: i32, flags: i32, start: i64, end: i64) -> StreamMmap {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_mmap_new_with_bounds(fd, prot, flags, start, end)).unsafe_cast()
        }
    }
}

pub const NONE_STREAM_MMAP: Option<&StreamMmap> = None;

pub trait StreamMmapExt: 'static {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_owner(&self) -> bool;

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamMmap>> StreamMmapExt for O {
    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_mmap_get_owner(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_2", feature = "dox"))]
    fn set_owner(&self, owner: bool) {
        unsafe {
            ffi::g_mime_stream_mmap_set_owner(self.as_ref().to_glib_none().0, owner.to_glib());
        }
    }
}

impl fmt::Display for StreamMmap {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamMmap")
    }
}
