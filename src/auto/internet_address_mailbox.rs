// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use InternetAddress;
use ffi;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct InternetAddressMailbox(Object<ffi::InternetAddressMailbox, ffi::InternetAddressMailboxClass, InternetAddressMailboxClass>) @extends InternetAddress;

    match fn {
        get_type => || ffi::internet_address_mailbox_get_type(),
    }
}

impl InternetAddressMailbox {
    pub fn new(name: &str, addr: &str) -> InternetAddressMailbox {
        unsafe {
            InternetAddress::from_glib_full(ffi::internet_address_mailbox_new(name.to_glib_none().0, addr.to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_INTERNET_ADDRESS_MAILBOX: Option<&InternetAddressMailbox> = None;

pub trait InternetAddressMailboxExt: 'static {
    fn get_addr(&self) -> Option<GString>;

    fn get_idn_addr(&self) -> Option<GString>;

    fn set_addr(&self, addr: &str);
}

impl<O: IsA<InternetAddressMailbox>> InternetAddressMailboxExt for O {
    fn get_addr(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::internet_address_mailbox_get_addr(self.as_ref().to_glib_none().0))
        }
    }

    fn get_idn_addr(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::internet_address_mailbox_get_idn_addr(self.as_ref().to_glib_none().0))
        }
    }

    fn set_addr(&self, addr: &str) {
        unsafe {
            ffi::internet_address_mailbox_set_addr(self.as_ref().to_glib_none().0, addr.to_glib_none().0);
        }
    }
}

impl fmt::Display for InternetAddressMailbox {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InternetAddressMailbox")
    }
}
