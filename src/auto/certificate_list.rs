// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Certificate;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct CertificateList(Object<ffi::GMimeCertificateList, ffi::GMimeCertificateListClass>);

    match fn {
        get_type => || ffi::g_mime_certificate_list_get_type(),
    }
}

impl CertificateList {
    pub fn new() -> CertificateList {
        unsafe {
            from_glib_full(ffi::g_mime_certificate_list_new())
        }
    }
}

impl Default for CertificateList {
    fn default() -> Self {
        Self::new()
    }
}

pub trait CertificateListExt {
    fn add(&self, cert: &Certificate) -> i32;

    fn clear(&self);

    fn contains(&self, cert: &Certificate) -> bool;

    fn get_certificate(&self, index: i32) -> Option<Certificate>;

    fn index_of(&self, cert: &Certificate) -> i32;

    fn insert(&self, index: i32, cert: &Certificate);

    fn length(&self) -> i32;

    fn remove(&self, cert: &Certificate) -> bool;

    fn remove_at(&self, index: i32) -> bool;

    fn set_certificate(&self, index: i32, cert: &Certificate);
}

impl<O: IsA<CertificateList>> CertificateListExt for O {
    fn add(&self, cert: &Certificate) -> i32 {
        unsafe {
            ffi::g_mime_certificate_list_add(self.to_glib_none().0, cert.to_glib_none().0)
        }
    }

    fn clear(&self) {
        unsafe {
            ffi::g_mime_certificate_list_clear(self.to_glib_none().0);
        }
    }

    fn contains(&self, cert: &Certificate) -> bool {
        unsafe {
            from_glib(ffi::g_mime_certificate_list_contains(self.to_glib_none().0, cert.to_glib_none().0))
        }
    }

    fn get_certificate(&self, index: i32) -> Option<Certificate> {
        unsafe {
            from_glib_full(ffi::g_mime_certificate_list_get_certificate(self.to_glib_none().0, index))
        }
    }

    fn index_of(&self, cert: &Certificate) -> i32 {
        unsafe {
            ffi::g_mime_certificate_list_index_of(self.to_glib_none().0, cert.to_glib_none().0)
        }
    }

    fn insert(&self, index: i32, cert: &Certificate) {
        unsafe {
            ffi::g_mime_certificate_list_insert(self.to_glib_none().0, index, cert.to_glib_none().0);
        }
    }

    fn length(&self) -> i32 {
        unsafe {
            ffi::g_mime_certificate_list_length(self.to_glib_none().0)
        }
    }

    fn remove(&self, cert: &Certificate) -> bool {
        unsafe {
            from_glib(ffi::g_mime_certificate_list_remove(self.to_glib_none().0, cert.to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> bool {
        unsafe {
            from_glib(ffi::g_mime_certificate_list_remove_at(self.to_glib_none().0, index))
        }
    }

    fn set_certificate(&self, index: i32, cert: &Certificate) {
        unsafe {
            ffi::g_mime_certificate_list_set_certificate(self.to_glib_none().0, index, cert.to_glib_none().0);
        }
    }
}
