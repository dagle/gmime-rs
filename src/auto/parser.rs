// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use Format;
use Message;
use Object;
use ParserOptions;
use Stream;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::boxed::Box as Box_;
use std::fmt;

glib_wrapper! {
    pub struct Parser(Object<gmime_sys::GMimeParser, gmime_sys::GMimeParserClass, ParserClass>);

    match fn {
        get_type => || gmime_sys::g_mime_parser_get_type(),
    }
}

impl Parser {
    pub fn new() -> Parser {
        unsafe {
            from_glib_full(gmime_sys::g_mime_parser_new())
        }
    }

    pub fn new_with_stream<P: IsA<Stream>>(stream: &P) -> Parser {
        unsafe {
            from_glib_full(gmime_sys::g_mime_parser_new_with_stream(stream.as_ref().to_glib_none().0))
        }
    }
}

impl Default for Parser {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_PARSER: Option<&Parser> = None;

pub trait ParserExt: 'static {
    fn construct_message(&self, options: Option<&ParserOptions>) -> Option<Message>;

    fn construct_part(&self, options: Option<&ParserOptions>) -> Option<Object>;

    fn eos(&self) -> bool;

    fn get_format(&self) -> Format;

    fn get_headers_begin(&self) -> i64;

    fn get_headers_end(&self) -> i64;

    fn get_mbox_marker(&self) -> Option<GString>;

    fn get_mbox_marker_offset(&self) -> i64;

    fn get_persist_stream(&self) -> bool;

    fn get_respect_content_length(&self) -> bool;

    fn init_with_stream<P: IsA<Stream>>(&self, stream: &P);

    fn set_format(&self, format: Format);

    fn set_header_regex<P: Fn(&Parser, &str, &str, i64) + 'static>(&self, regex: &str, header_cb: P);

    fn set_persist_stream(&self, persist: bool);

    fn set_respect_content_length(&self, respect_content_length: bool);

    fn tell(&self) -> i64;
}

impl<O: IsA<Parser>> ParserExt for O {
    fn construct_message(&self, options: Option<&ParserOptions>) -> Option<Message> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_parser_construct_message(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn construct_part(&self, options: Option<&ParserOptions>) -> Option<Object> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_parser_construct_part(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn eos(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_parser_eos(self.as_ref().to_glib_none().0))
        }
    }

    fn get_format(&self) -> Format {
        unsafe {
            from_glib(gmime_sys::g_mime_parser_get_format(self.as_ref().to_glib_none().0))
        }
    }

    fn get_headers_begin(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_parser_get_headers_begin(self.as_ref().to_glib_none().0)
        }
    }

    fn get_headers_end(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_parser_get_headers_end(self.as_ref().to_glib_none().0)
        }
    }

    fn get_mbox_marker(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_parser_get_mbox_marker(self.as_ref().to_glib_none().0))
        }
    }

    fn get_mbox_marker_offset(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_parser_get_mbox_marker_offset(self.as_ref().to_glib_none().0)
        }
    }

    fn get_persist_stream(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_parser_get_persist_stream(self.as_ref().to_glib_none().0))
        }
    }

    fn get_respect_content_length(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_parser_get_respect_content_length(self.as_ref().to_glib_none().0))
        }
    }

    fn init_with_stream<P: IsA<Stream>>(&self, stream: &P) {
        unsafe {
            gmime_sys::g_mime_parser_init_with_stream(self.as_ref().to_glib_none().0, stream.as_ref().to_glib_none().0);
        }
    }

    fn set_format(&self, format: Format) {
        unsafe {
            gmime_sys::g_mime_parser_set_format(self.as_ref().to_glib_none().0, format.to_glib());
        }
    }

    fn set_header_regex<P: Fn(&Parser, &str, &str, i64) + 'static>(&self, regex: &str, header_cb: P) {
        let header_cb_data: Box_<P> = Box_::new(header_cb);
        unsafe extern "C" fn header_cb_func<P: Fn(&Parser, &str, &str, i64) + 'static>(parser: *mut gmime_sys::GMimeParser, header: *const libc::c_char, value: *const libc::c_char, offset: i64, user_data: glib_sys::gpointer) {
            let parser = from_glib_borrow(parser);
            let header: GString = from_glib_borrow(header);
            let value: GString = from_glib_borrow(value);
            let callback: &P = &*(user_data as *mut _);
            (*callback)(&parser, header.as_str(), value.as_str(), offset);
        }
        let header_cb = Some(header_cb_func::<P> as _);
        let super_callback0: Box_<P> = header_cb_data;
        unsafe {
            gmime_sys::g_mime_parser_set_header_regex(self.as_ref().to_glib_none().0, regex.to_glib_none().0, header_cb, Box_::into_raw(super_callback0) as *mut _);
        }
    }

    fn set_persist_stream(&self, persist: bool) {
        unsafe {
            gmime_sys::g_mime_parser_set_persist_stream(self.as_ref().to_glib_none().0, persist.to_glib());
        }
    }

    fn set_respect_content_length(&self, respect_content_length: bool) {
        unsafe {
            gmime_sys::g_mime_parser_set_respect_content_length(self.as_ref().to_glib_none().0, respect_content_length.to_glib());
        }
    }

    fn tell(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_parser_tell(self.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for Parser {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Parser")
    }
}
