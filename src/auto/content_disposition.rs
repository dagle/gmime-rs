// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use FormatOptions;
use ParamList;
use ParserOptions;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct ContentDisposition(Object<ffi::GMimeContentDisposition, ffi::GMimeContentDispositionClass, ContentDispositionClass>);

    match fn {
        get_type => || ffi::g_mime_content_disposition_get_type(),
    }
}

impl ContentDisposition {
    pub fn new() -> ContentDisposition {
        unsafe {
            from_glib_full(ffi::g_mime_content_disposition_new())
        }
    }

    pub fn parse<'a, P: Into<Option<&'a ParserOptions>>>(options: P, str: &str) -> Option<ContentDisposition> {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_content_disposition_parse(mut_override(options.to_glib_none().0), str.to_glib_none().0))
        }
    }
}

impl Default for ContentDisposition {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_CONTENT_DISPOSITION: Option<&ContentDisposition> = None;

pub trait ContentDispositionExt: 'static {
    fn encode<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> Option<GString>;

    fn get_disposition(&self) -> Option<GString>;

    fn get_parameter(&self, name: &str) -> Option<GString>;

    fn get_parameters(&self) -> Option<ParamList>;

    fn is_attachment(&self) -> bool;

    fn set_disposition(&self, value: &str);

    fn set_parameter(&self, name: &str, value: &str);
}

impl<O: IsA<ContentDisposition>> ContentDispositionExt for O {
    fn encode<'a, P: Into<Option<&'a FormatOptions>>>(&self, options: P) -> Option<GString> {
        let options = options.into();
        unsafe {
            from_glib_full(ffi::g_mime_content_disposition_encode(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0)))
        }
    }

    fn get_disposition(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_content_disposition_get_disposition(self.as_ref().to_glib_none().0))
        }
    }

    fn get_parameter(&self, name: &str) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_content_disposition_get_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_parameters(&self) -> Option<ParamList> {
        unsafe {
            from_glib_none(ffi::g_mime_content_disposition_get_parameters(self.as_ref().to_glib_none().0))
        }
    }

    fn is_attachment(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_content_disposition_is_attachment(self.as_ref().to_glib_none().0))
        }
    }

    fn set_disposition(&self, value: &str) {
        unsafe {
            ffi::g_mime_content_disposition_set_disposition(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_parameter(&self, name: &str, value: &str) {
        unsafe {
            ffi::g_mime_content_disposition_set_parameter(self.as_ref().to_glib_none().0, name.to_glib_none().0, value.to_glib_none().0);
        }
    }
}

impl fmt::Display for ContentDisposition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ContentDisposition")
    }
}
