// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gmime_sys;
use std::fmt;
use AutocryptPreferEncrypt;
use InternetAddressMailbox;

glib_wrapper! {
    pub struct AutocryptHeader(Object<gmime_sys::GMimeAutocryptHeader, gmime_sys::GMimeAutocryptHeaderClass, AutocryptHeaderClass>);

    match fn {
        get_type => || gmime_sys::g_mime_autocrypt_header_get_type(),
    }
}

impl AutocryptHeader {
    pub fn new() -> AutocryptHeader {
        unsafe {
            from_glib_full(gmime_sys::g_mime_autocrypt_header_new())
        }
    }

    pub fn from_string(string: &str) -> AutocryptHeader {
        unsafe {
            from_glib_full(gmime_sys::g_mime_autocrypt_header_new_from_string(string.to_glib_none().0))
        }
    }
}

impl Default for AutocryptHeader {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_AUTOCRYPT_HEADER: Option<&AutocryptHeader> = None;

pub trait AutocryptHeaderExt: 'static {
    fn clone<P: IsA<AutocryptHeader>>(&self, src: &P);

    fn get_address(&self) -> Option<InternetAddressMailbox>;

    fn get_address_as_string(&self) -> Option<GString>;

    fn get_effective_date(&self) -> Option<glib::DateTime>;

    fn get_keydata(&self) -> Option<glib::Bytes>;

    fn get_prefer_encrypt(&self) -> AutocryptPreferEncrypt;

    fn is_complete(&self) -> bool;

    fn set_address<P: IsA<InternetAddressMailbox>>(&self, address: &P);

    fn set_address_from_string(&self, address: &str);

    fn set_effective_date(&self, effective_date: &glib::DateTime);

    fn set_keydata(&self, data: &glib::Bytes);

    fn set_prefer_encrypt(&self, pref: AutocryptPreferEncrypt);

    fn to_string(&self, gossip: bool) -> GString;
}

impl<O: IsA<AutocryptHeader>> AutocryptHeaderExt for O {
    fn clone<P: IsA<AutocryptHeader>>(&self, src: &P) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_clone(self.as_ref().to_glib_none().0, src.as_ref().to_glib_none().0);
        }
    }

    fn get_address(&self) -> Option<InternetAddressMailbox> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_autocrypt_header_get_address(self.as_ref().to_glib_none().0))
        }
    }

    fn get_address_as_string(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_autocrypt_header_get_address_as_string(self.as_ref().to_glib_none().0))
        }
    }

    fn get_effective_date(&self) -> Option<glib::DateTime> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_autocrypt_header_get_effective_date(self.as_ref().to_glib_none().0))
        }
    }

    fn get_keydata(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_autocrypt_header_get_keydata(self.as_ref().to_glib_none().0))
        }
    }

    fn get_prefer_encrypt(&self) -> AutocryptPreferEncrypt {
        unsafe {
            from_glib(gmime_sys::g_mime_autocrypt_header_get_prefer_encrypt(self.as_ref().to_glib_none().0))
        }
    }

    fn is_complete(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_autocrypt_header_is_complete(self.as_ref().to_glib_none().0))
        }
    }

    fn set_address<P: IsA<InternetAddressMailbox>>(&self, address: &P) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_set_address(self.as_ref().to_glib_none().0, address.as_ref().to_glib_none().0);
        }
    }

    fn set_address_from_string(&self, address: &str) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_set_address_from_string(self.as_ref().to_glib_none().0, address.to_glib_none().0);
        }
    }

    fn set_effective_date(&self, effective_date: &glib::DateTime) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_set_effective_date(self.as_ref().to_glib_none().0, effective_date.to_glib_none().0);
        }
    }

    fn set_keydata(&self, data: &glib::Bytes) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_set_keydata(self.as_ref().to_glib_none().0, data.to_glib_none().0);
        }
    }

    fn set_prefer_encrypt(&self, pref: AutocryptPreferEncrypt) {
        unsafe {
            gmime_sys::g_mime_autocrypt_header_set_prefer_encrypt(self.as_ref().to_glib_none().0, pref.to_glib());
        }
    }

    fn to_string(&self, gossip: bool) -> GString {
        unsafe {
            from_glib_full(gmime_sys::g_mime_autocrypt_header_to_string(self.as_ref().to_glib_none().0, gossip.to_glib()))
        }
    }
}

impl fmt::Display for AutocryptHeader {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AutocryptHeader")
    }
}
