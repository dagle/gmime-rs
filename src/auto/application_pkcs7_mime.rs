// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 4740f5e+)
// DO NOT EDIT

use Object;
use Part;
use SecureMimeType;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct ApplicationPkcs7Mime(Object<ffi::GMimeApplicationPkcs7Mime, ffi::GMimeApplicationPkcs7MimeClass>): Part, Object;

    match fn {
        get_type => || ffi::g_mime_application_pkcs7_mime_get_type(),
    }
}

impl ApplicationPkcs7Mime {
    pub fn new(type_: SecureMimeType) -> ApplicationPkcs7Mime {
        unsafe {
            from_glib_full(ffi::g_mime_application_pkcs7_mime_new(type_.to_glib()))
        }
    }

    //pub fn encrypt<P: IsA<Object>>(entity: &P, flags: /*Ignored*/EncryptFlags, recipients: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }, error: /*Ignored*/Option<Error>) -> Option<ApplicationPkcs7Mime> {
    //    unsafe { TODO: call ffi::g_mime_application_pkcs7_mime_encrypt() }
    //}

    //pub fn sign<P: IsA<Object>>(entity: &P, userid: &str, error: /*Ignored*/Option<Error>) -> Option<ApplicationPkcs7Mime> {
    //    unsafe { TODO: call ffi::g_mime_application_pkcs7_mime_sign() }
    //}
}

pub trait ApplicationPkcs7MimeExt {
    //fn decrypt(&self, flags: /*Ignored*/DecryptFlags, session_key: &str, result: /*Ignored*/&DecryptResult, error: /*Ignored*/Option<Error>) -> Option<Object>;

    fn get_smime_type(&self) -> SecureMimeType;

    //fn verify(&self, flags: /*Ignored*/VerifyFlags, error: /*Ignored*/Option<Error>) -> Result<Option<SignatureList>, Object, Error>;
}

impl<O: IsA<ApplicationPkcs7Mime>> ApplicationPkcs7MimeExt for O {
    //fn decrypt(&self, flags: /*Ignored*/DecryptFlags, session_key: &str, result: /*Ignored*/&DecryptResult, error: /*Ignored*/Option<Error>) -> Option<Object> {
    //    unsafe { TODO: call ffi::g_mime_application_pkcs7_mime_decrypt() }
    //}

    fn get_smime_type(&self) -> SecureMimeType {
        unsafe {
            from_glib(ffi::g_mime_application_pkcs7_mime_get_smime_type(self.to_glib_none().0))
        }
    }

    //fn verify(&self, flags: /*Ignored*/VerifyFlags, error: /*Ignored*/Option<Error>) -> Result<Option<SignatureList>, Object, Error> {
    //    unsafe { TODO: call ffi::g_mime_application_pkcs7_mime_verify() }
    //}
}
