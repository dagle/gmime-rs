// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use std::ptr;
use Stream;

glib_wrapper! {
    pub struct StreamFs(Object<gmime_sys::GMimeStreamFs, gmime_sys::GMimeStreamFsClass, StreamFsClass>) @extends Stream;

    match fn {
        get_type => || gmime_sys::g_mime_stream_fs_get_type(),
    }
}

impl StreamFs {
    pub fn new(fd: i32) -> StreamFs {
        unsafe {
            Stream::from_glib_full(gmime_sys::g_mime_stream_fs_new(fd)).unsafe_cast()
        }
    }

    pub fn with_bounds(fd: i32, start: i64, end: i64) -> StreamFs {
        unsafe {
            Stream::from_glib_full(gmime_sys::g_mime_stream_fs_new_with_bounds(fd, start, end)).unsafe_cast()
        }
    }

    pub fn open(path: &str, flags: i32, mode: i32) -> Result<Stream, glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gmime_sys::g_mime_stream_fs_open(path.to_glib_none().0, flags, mode, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub const NONE_STREAM_FS: Option<&StreamFs> = None;

pub trait StreamFsExt: 'static {
    fn get_owner(&self) -> bool;

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamFs>> StreamFsExt for O {
    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_stream_fs_get_owner(self.as_ref().to_glib_none().0))
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            gmime_sys::g_mime_stream_fs_set_owner(self.as_ref().to_glib_none().0, owner.to_glib());
        }
    }
}

impl fmt::Display for StreamFs {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamFs")
    }
}
