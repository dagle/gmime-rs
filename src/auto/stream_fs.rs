// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Stream;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct StreamFs(Object<ffi::GMimeStreamFs, ffi::GMimeStreamFsClass>): Stream;

    match fn {
        get_type => || ffi::g_mime_stream_fs_get_type(),
    }
}

impl StreamFs {
    pub fn new(fd: i32) -> StreamFs {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_fs_new(fd)).downcast_unchecked()
        }
    }

    pub fn new_with_bounds(fd: i32, start: i64, end: i64) -> StreamFs {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_fs_new_with_bounds(fd, start, end)).downcast_unchecked()
        }
    }

    //pub fn open(path: &str, flags: i32, mode: i32, error: /*Ignored*/Option<Error>) -> Option<Stream> {
    //    unsafe { TODO: call ffi::g_mime_stream_fs_open() }
    //}
}

pub trait StreamFsExt {
    fn get_owner(&self) -> bool;

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamFs>> StreamFsExt for O {
    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_fs_get_owner(self.to_glib_none().0))
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            ffi::g_mime_stream_fs_set_owner(self.to_glib_none().0, owner.to_glib());
        }
    }
}
