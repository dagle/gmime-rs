// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use FormatOptions;
use InternetAddress;
use ParserOptions;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;

glib_wrapper! {
    pub struct InternetAddressList(Object<gmime_sys::InternetAddressList, gmime_sys::InternetAddressListClass, InternetAddressListClass>);

    match fn {
        get_type => || gmime_sys::internet_address_list_get_type(),
    }
}

impl InternetAddressList {
    pub fn new() -> InternetAddressList {
        unsafe {
            from_glib_full(gmime_sys::internet_address_list_new())
        }
    }

    pub fn parse(options: Option<&ParserOptions>, str: &str) -> Option<InternetAddressList> {
        unsafe {
            from_glib_full(gmime_sys::internet_address_list_parse(mut_override(options.to_glib_none().0), str.to_glib_none().0))
        }
    }
}

impl Default for InternetAddressList {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_INTERNET_ADDRESS_LIST: Option<&InternetAddressList> = None;

pub trait InternetAddressListExt: 'static {
    fn add<P: IsA<InternetAddress>>(&self, ia: &P) -> i32;

    fn append<P: IsA<InternetAddressList>>(&self, append: &P);

    fn clear(&self);

    fn contains<P: IsA<InternetAddress>>(&self, ia: &P) -> bool;

    //fn encode(&self, options: Option<&mut FormatOptions>, str: /*Ignored*/&mut glib::String);

    fn get_address(&self, index: i32) -> Option<InternetAddress>;

    fn index_of<P: IsA<InternetAddress>>(&self, ia: &P) -> i32;

    fn insert<P: IsA<InternetAddress>>(&self, index: i32, ia: &P);

    fn length(&self) -> i32;

    fn prepend<P: IsA<InternetAddressList>>(&self, prepend: &P);

    fn remove<P: IsA<InternetAddress>>(&self, ia: &P) -> bool;

    fn remove_at(&self, index: i32) -> bool;

    fn set_address<P: IsA<InternetAddress>>(&self, index: i32, ia: &P);

    fn to_string(&self, options: Option<&FormatOptions>, encode: bool) -> GString;
}

impl<O: IsA<InternetAddressList>> InternetAddressListExt for O {
    fn add<P: IsA<InternetAddress>>(&self, ia: &P) -> i32 {
        unsafe {
            gmime_sys::internet_address_list_add(self.as_ref().to_glib_none().0, ia.as_ref().to_glib_none().0)
        }
    }

    fn append<P: IsA<InternetAddressList>>(&self, append: &P) {
        unsafe {
            gmime_sys::internet_address_list_append(self.as_ref().to_glib_none().0, append.as_ref().to_glib_none().0);
        }
    }

    fn clear(&self) {
        unsafe {
            gmime_sys::internet_address_list_clear(self.as_ref().to_glib_none().0);
        }
    }

    fn contains<P: IsA<InternetAddress>>(&self, ia: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::internet_address_list_contains(self.as_ref().to_glib_none().0, ia.as_ref().to_glib_none().0))
        }
    }

    //fn encode(&self, options: Option<&mut FormatOptions>, str: /*Ignored*/&mut glib::String) {
    //    unsafe { TODO: call gmime_sys:internet_address_list_encode() }
    //}

    fn get_address(&self, index: i32) -> Option<InternetAddress> {
        unsafe {
            from_glib_none(gmime_sys::internet_address_list_get_address(self.as_ref().to_glib_none().0, index))
        }
    }

    fn index_of<P: IsA<InternetAddress>>(&self, ia: &P) -> i32 {
        unsafe {
            gmime_sys::internet_address_list_index_of(self.as_ref().to_glib_none().0, ia.as_ref().to_glib_none().0)
        }
    }

    fn insert<P: IsA<InternetAddress>>(&self, index: i32, ia: &P) {
        unsafe {
            gmime_sys::internet_address_list_insert(self.as_ref().to_glib_none().0, index, ia.as_ref().to_glib_none().0);
        }
    }

    fn length(&self) -> i32 {
        unsafe {
            gmime_sys::internet_address_list_length(self.as_ref().to_glib_none().0)
        }
    }

    fn prepend<P: IsA<InternetAddressList>>(&self, prepend: &P) {
        unsafe {
            gmime_sys::internet_address_list_prepend(self.as_ref().to_glib_none().0, prepend.as_ref().to_glib_none().0);
        }
    }

    fn remove<P: IsA<InternetAddress>>(&self, ia: &P) -> bool {
        unsafe {
            from_glib(gmime_sys::internet_address_list_remove(self.as_ref().to_glib_none().0, ia.as_ref().to_glib_none().0))
        }
    }

    fn remove_at(&self, index: i32) -> bool {
        unsafe {
            from_glib(gmime_sys::internet_address_list_remove_at(self.as_ref().to_glib_none().0, index))
        }
    }

    fn set_address<P: IsA<InternetAddress>>(&self, index: i32, ia: &P) {
        unsafe {
            gmime_sys::internet_address_list_set_address(self.as_ref().to_glib_none().0, index, ia.as_ref().to_glib_none().0);
        }
    }

    fn to_string(&self, options: Option<&FormatOptions>, encode: bool) -> GString {
        unsafe {
            from_glib_full(gmime_sys::internet_address_list_to_string(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), encode.to_glib()))
        }
    }
}

impl fmt::Display for InternetAddressList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InternetAddressList")
    }
}
