// This file was generated by gir (https://github.com/gtk-rs/gir @ 7f5a2b5)
// from gir-files (https://github.com/gtk-rs/gir-files @ 4740f5e+)
// DO NOT EDIT

use Stream;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct StreamNull(Object<ffi::GMimeStreamNull, ffi::GMimeStreamNullClass>): Stream;

    match fn {
        get_type => || ffi::g_mime_stream_null_get_type(),
    }
}

impl StreamNull {
    pub fn new() -> StreamNull {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_null_new()).downcast_unchecked()
        }
    }
}

impl Default for StreamNull {
    fn default() -> Self {
        Self::new()
    }
}

pub trait StreamNullExt {
    fn get_count_newlines(&self) -> bool;

    fn set_count_newlines(&self, count: bool);
}

impl<O: IsA<StreamNull>> StreamNullExt for O {
    fn get_count_newlines(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_null_get_count_newlines(self.to_glib_none().0))
        }
    }

    fn set_count_newlines(&self, count: bool) {
        unsafe {
            ffi::g_mime_stream_null_set_count_newlines(self.to_glib_none().0, count.to_glib());
        }
    }
}
