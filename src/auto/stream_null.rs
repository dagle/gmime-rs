// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::{Stream};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "GMimeStreamNull")]
    pub struct StreamNull(Object<ffi::GMimeStreamNull, ffi::GMimeStreamNullClass>) @extends Stream;

    match fn {
        type_ => || ffi::g_mime_stream_null_get_type(),
    }
}

impl StreamNull {
        pub const NONE: Option<&'static StreamNull> = None;
    

    #[doc(alias = "g_mime_stream_null_new")]
    pub fn new() -> StreamNull {
        assert_initialized_main_thread!();
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_null_new()).unsafe_cast()
        }
    }
}

impl Default for StreamNull {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

pub trait StreamNullExt: 'static {
    #[doc(alias = "g_mime_stream_null_get_count_newlines")]
    #[doc(alias = "get_count_newlines")]
    fn is_count_newlines(&self) -> bool;

    #[doc(alias = "g_mime_stream_null_set_count_newlines")]
    fn set_count_newlines(&self, count: bool);
}

impl<O: IsA<StreamNull>> StreamNullExt for O {
    fn is_count_newlines(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_null_get_count_newlines(self.as_ref().to_glib_none().0))
        }
    }

    fn set_count_newlines(&self, count: bool) {
        unsafe {
            ffi::g_mime_stream_null_set_count_newlines(self.as_ref().to_glib_none().0, count.into_glib());
        }
    }
}

impl fmt::Display for StreamNull {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StreamNull")
    }
}
