// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use ContentEncoding;
use DataWrapper;
use DecryptFlags;
use DecryptResult;
use EncodingConstraint;
use Error;
use Object;
use OpenPGPData;
use SignatureList;
use VerifyFlags;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct Part(Object<ffi::GMimePart, ffi::GMimePartClass, PartClass>) @extends Object;

    match fn {
        get_type => || ffi::g_mime_part_get_type(),
    }
}

impl Part {
    pub fn new() -> Part {
        unsafe {
            from_glib_full(ffi::g_mime_part_new())
        }
    }

    pub fn new_with_type(type_: &str, subtype: &str) -> Part {
        unsafe {
            from_glib_full(ffi::g_mime_part_new_with_type(type_.to_glib_none().0, subtype.to_glib_none().0))
        }
    }
}

impl Default for Part {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_PART: Option<&Part> = None;

pub trait PartExt: 'static {
    fn get_best_content_encoding(&self, constraint: EncodingConstraint) -> ContentEncoding;

    fn get_content(&self) -> Option<DataWrapper>;

    fn get_content_description(&self) -> Option<GString>;

    fn get_content_encoding(&self) -> ContentEncoding;

    fn get_content_location(&self) -> Option<GString>;

    fn get_content_md5(&self) -> Option<GString>;

    fn get_filename(&self) -> Option<GString>;

    fn get_openpgp_data(&self) -> OpenPGPData;

    fn is_attachment(&self) -> bool;

    fn openpgp_decrypt<'a, P: Into<Option<&'a str>>>(&self, flags: DecryptFlags, session_key: P) -> Result<Option<DecryptResult>, Error>;

    //fn openpgp_encrypt<'a, P: Into<Option<&'a str>>>(&self, sign: bool, userid: P, flags: EncryptFlags, recipients: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Result<(), Error>;

    fn openpgp_sign(&self, userid: &str) -> Result<(), Error>;

    fn openpgp_verify(&self, flags: VerifyFlags) -> Result<Option<SignatureList>, Error>;

    fn set_content<P: IsA<DataWrapper>>(&self, content: &P);

    fn set_content_description(&self, description: &str);

    fn set_content_encoding(&self, encoding: ContentEncoding);

    fn set_content_location(&self, content_location: &str);

    fn set_content_md5(&self, content_md5: &str);

    fn set_filename(&self, filename: &str);

    fn set_openpgp_data(&self, data: OpenPGPData);

    fn verify_content_md5(&self) -> bool;
}

impl<O: IsA<Part>> PartExt for O {
    fn get_best_content_encoding(&self, constraint: EncodingConstraint) -> ContentEncoding {
        unsafe {
            from_glib(ffi::g_mime_part_get_best_content_encoding(self.as_ref().to_glib_none().0, constraint.to_glib()))
        }
    }

    fn get_content(&self) -> Option<DataWrapper> {
        unsafe {
            from_glib_none(ffi::g_mime_part_get_content(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_description(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_part_get_content_description(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_encoding(&self) -> ContentEncoding {
        unsafe {
            from_glib(ffi::g_mime_part_get_content_encoding(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_location(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_part_get_content_location(self.as_ref().to_glib_none().0))
        }
    }

    fn get_content_md5(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_part_get_content_md5(self.as_ref().to_glib_none().0))
        }
    }

    fn get_filename(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_part_get_filename(self.as_ref().to_glib_none().0))
        }
    }

    fn get_openpgp_data(&self) -> OpenPGPData {
        unsafe {
            from_glib(ffi::g_mime_part_get_openpgp_data(self.as_ref().to_glib_none().0))
        }
    }

    fn is_attachment(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_part_is_attachment(self.as_ref().to_glib_none().0))
        }
    }

    fn openpgp_decrypt<'a, P: Into<Option<&'a str>>>(&self, flags: DecryptFlags, session_key: P) -> Result<Option<DecryptResult>, Error> {
        let session_key = session_key.into();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_mime_part_openpgp_decrypt(self.as_ref().to_glib_none().0, flags.to_glib(), session_key.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    //fn openpgp_encrypt<'a, P: Into<Option<&'a str>>>(&self, sign: bool, userid: P, flags: EncryptFlags, recipients: /*Unknown conversion*//*Unimplemented*/PtrArray TypeId { ns_id: 0, id: 28 }) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::g_mime_part_openpgp_encrypt() }
    //}

    fn openpgp_sign(&self, userid: &str) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::g_mime_part_openpgp_sign(self.as_ref().to_glib_none().0, userid.to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn openpgp_verify(&self, flags: VerifyFlags) -> Result<Option<SignatureList>, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::g_mime_part_openpgp_verify(self.as_ref().to_glib_none().0, flags.to_glib(), &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    fn set_content<P: IsA<DataWrapper>>(&self, content: &P) {
        unsafe {
            ffi::g_mime_part_set_content(self.as_ref().to_glib_none().0, content.as_ref().to_glib_none().0);
        }
    }

    fn set_content_description(&self, description: &str) {
        unsafe {
            ffi::g_mime_part_set_content_description(self.as_ref().to_glib_none().0, description.to_glib_none().0);
        }
    }

    fn set_content_encoding(&self, encoding: ContentEncoding) {
        unsafe {
            ffi::g_mime_part_set_content_encoding(self.as_ref().to_glib_none().0, encoding.to_glib());
        }
    }

    fn set_content_location(&self, content_location: &str) {
        unsafe {
            ffi::g_mime_part_set_content_location(self.as_ref().to_glib_none().0, content_location.to_glib_none().0);
        }
    }

    fn set_content_md5(&self, content_md5: &str) {
        unsafe {
            ffi::g_mime_part_set_content_md5(self.as_ref().to_glib_none().0, content_md5.to_glib_none().0);
        }
    }

    fn set_filename(&self, filename: &str) {
        unsafe {
            ffi::g_mime_part_set_filename(self.as_ref().to_glib_none().0, filename.to_glib_none().0);
        }
    }

    fn set_openpgp_data(&self, data: OpenPGPData) {
        unsafe {
            ffi::g_mime_part_set_openpgp_data(self.as_ref().to_glib_none().0, data.to_glib());
        }
    }

    fn verify_content_md5(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_part_verify_content_md5(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for Part {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Part")
    }
}
