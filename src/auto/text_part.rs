// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Object;
use Part;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct TextPart(Object<ffi::GMimeTextPart, ffi::GMimeTextPartClass>): Part, Object;

    match fn {
        get_type => || ffi::g_mime_text_part_get_type(),
    }
}

impl TextPart {
    pub fn new() -> TextPart {
        unsafe {
            from_glib_full(ffi::g_mime_text_part_new())
        }
    }

    pub fn new_with_subtype(subtype: &str) -> TextPart {
        unsafe {
            from_glib_full(ffi::g_mime_text_part_new_with_subtype(subtype.to_glib_none().0))
        }
    }
}

impl Default for TextPart {
    fn default() -> Self {
        Self::new()
    }
}

pub trait TextPartExt {
    fn get_charset(&self) -> Option<String>;

    fn get_text(&self) -> Option<String>;

    fn set_charset(&self, charset: &str);

    fn set_text(&self, text: &str);
}

impl<O: IsA<TextPart>> TextPartExt for O {
    fn get_charset(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_text_part_get_charset(self.to_glib_none().0))
        }
    }

    fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::g_mime_text_part_get_text(self.to_glib_none().0))
        }
    }

    fn set_charset(&self, charset: &str) {
        unsafe {
            ffi::g_mime_text_part_set_charset(self.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn set_text(&self, text: &str) {
        unsafe {
            ffi::g_mime_text_part_set_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }
}
