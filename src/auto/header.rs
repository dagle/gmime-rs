// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Header(Object<ffi::GMimeHeader, ffi::GMimeHeaderClass>);

    match fn {
        get_type => || ffi::g_mime_header_get_type(),
    }
}

pub trait HeaderExt {
    //fn format_addrlist<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_content_disposition<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_content_type<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_default<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_message_id<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_received<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    //fn format_references<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String>;

    fn get_name(&self) -> Option<String>;

    fn get_offset(&self) -> i64;

    fn get_raw_name(&self) -> Option<String>;

    fn get_raw_value(&self) -> Option<String>;

    fn get_value(&self) -> Option<String>;

    fn set_raw_value(&self, raw_value: &str);

    //fn set_value<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str);

    //fn write_to_stream<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize;
}

impl<O: IsA<Header>> HeaderExt for O {
    //fn format_addrlist<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_addrlist() }
    //}

    //fn format_content_disposition<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_content_disposition() }
    //}

    //fn format_content_type<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_content_type() }
    //}

    //fn format_default<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_default() }
    //}

    //fn format_message_id<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_message_id() }
    //}

    //fn format_received<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_received() }
    //}

    //fn format_references<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) -> Option<String> {
    //    unsafe { TODO: call ffi::g_mime_header_format_references() }
    //}

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_header_get_name(self.to_glib_none().0))
        }
    }

    fn get_offset(&self) -> i64 {
        unsafe {
            ffi::g_mime_header_get_offset(self.to_glib_none().0)
        }
    }

    fn get_raw_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_header_get_raw_name(self.to_glib_none().0))
        }
    }

    fn get_raw_value(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_header_get_raw_value(self.to_glib_none().0))
        }
    }

    fn get_value(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_header_get_value(self.to_glib_none().0))
        }
    }

    fn set_raw_value(&self, raw_value: &str) {
        unsafe {
            ffi::g_mime_header_set_raw_value(self.to_glib_none().0, raw_value.to_glib_none().0);
        }
    }

    //fn set_value<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>>(&self, options: P, value: &str, charset: &str) {
    //    unsafe { TODO: call ffi::g_mime_header_set_value() }
    //}

    //fn write_to_stream<'a, P: Into<Option<&'a /*Ignored*/FormatOptions>>, Q: IsA<Stream>>(&self, options: P, stream: &Q) -> isize {
    //    unsafe { TODO: call ffi::g_mime_header_write_to_stream() }
    //}
}
