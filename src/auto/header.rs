// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gmime_sys;
use std::fmt;
use FormatOptions;
use Stream;

glib_wrapper! {
    pub struct Header(Object<gmime_sys::GMimeHeader, gmime_sys::GMimeHeaderClass, HeaderClass>);

    match fn {
        get_type => || gmime_sys::g_mime_header_get_type(),
    }
}

pub const NONE_HEADER: Option<&Header> = None;

pub trait HeaderExt: 'static {
    fn format_addrlist(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_content_disposition(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_content_type(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_default(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_message_id(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_received(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn format_references(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString>;

    fn get_name(&self) -> Option<GString>;

    fn get_offset(&self) -> i64;

    fn get_raw_name(&self) -> Option<GString>;

    fn get_raw_value(&self) -> Option<GString>;

    fn get_value(&self) -> Option<GString>;

    fn set_raw_value(&self, raw_value: &str);

    fn set_value(&self, options: Option<&FormatOptions>, value: &str, charset: &str);

    fn write_to_stream<P: IsA<Stream>>(&self, options: Option<&FormatOptions>, stream: &P) -> isize;
}

impl<O: IsA<Header>> HeaderExt for O {
    fn format_addrlist(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_addrlist(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_content_disposition(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_content_disposition(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_content_type(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_content_type(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_default(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_default(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_message_id(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_message_id(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_received(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_received(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn format_references(&self, options: Option<&FormatOptions>, value: &str, charset: &str) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_header_format_references(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_header_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_offset(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_header_get_offset(self.as_ref().to_glib_none().0)
        }
    }

    fn get_raw_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_header_get_raw_name(self.as_ref().to_glib_none().0))
        }
    }

    fn get_raw_value(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_header_get_raw_value(self.as_ref().to_glib_none().0))
        }
    }

    fn get_value(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_header_get_value(self.as_ref().to_glib_none().0))
        }
    }

    fn set_raw_value(&self, raw_value: &str) {
        unsafe {
            gmime_sys::g_mime_header_set_raw_value(self.as_ref().to_glib_none().0, raw_value.to_glib_none().0);
        }
    }

    fn set_value(&self, options: Option<&FormatOptions>, value: &str, charset: &str) {
        unsafe {
            gmime_sys::g_mime_header_set_value(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), value.to_glib_none().0, charset.to_glib_none().0);
        }
    }

    fn write_to_stream<P: IsA<Stream>>(&self, options: Option<&FormatOptions>, stream: &P) -> isize {
        unsafe {
            gmime_sys::g_mime_header_write_to_stream(self.as_ref().to_glib_none().0, mut_override(options.to_glib_none().0), stream.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for Header {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Header")
    }
}
