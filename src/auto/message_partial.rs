// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Object;
use crate::Part;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeMessagePartial")]
    pub struct MessagePartial(Object<ffi::GMimeMessagePartial, ffi::GMimeMessagePartialClass>) @extends Part, Object;

    match fn {
        type_ => || ffi::g_mime_message_partial_get_type(),
    }
}

impl MessagePartial {
    #[doc(alias = "g_mime_message_partial_new")]
    pub fn new(id: &str, number: i32, total: i32) -> MessagePartial {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::g_mime_message_partial_new(
                id.to_glib_none().0,
                number,
                total,
            ))
        }
    }
}

pub const NONE_MESSAGE_PARTIAL: Option<&MessagePartial> = None;

pub trait MessagePartialExt: 'static {
    #[doc(alias = "g_mime_message_partial_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString>;

    #[doc(alias = "g_mime_message_partial_get_number")]
    #[doc(alias = "get_number")]
    fn number(&self) -> i32;

    #[doc(alias = "g_mime_message_partial_get_total")]
    #[doc(alias = "get_total")]
    fn total(&self) -> i32;
}

impl<O: IsA<MessagePartial>> MessagePartialExt for O {
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::g_mime_message_partial_get_id(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn number(&self) -> i32 {
        unsafe { ffi::g_mime_message_partial_get_number(self.as_ref().to_glib_none().0) }
    }

    fn total(&self) -> i32 {
        unsafe { ffi::g_mime_message_partial_get_total(self.as_ref().to_glib_none().0) }
    }
}

impl fmt::Display for MessagePartial {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MessagePartial")
    }
}
