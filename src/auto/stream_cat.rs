// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Stream;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeStreamCat")]
    pub struct StreamCat(Object<ffi::GMimeStreamCat, ffi::GMimeStreamCatClass>) @extends Stream;

    match fn {
        type_ => || ffi::g_mime_stream_cat_get_type(),
    }
}

impl StreamCat {
    pub const NONE: Option<&'static StreamCat> = None;

    #[doc(alias = "g_mime_stream_cat_new")]
    pub fn new() -> StreamCat {
        assert_initialized_main_thread!();
        unsafe { Stream::from_glib_full(ffi::g_mime_stream_cat_new()).unsafe_cast() }
    }
}

impl Default for StreamCat {
    fn default() -> Self {
        Self::new()
    }
}

pub trait StreamCatExt: 'static {
    #[doc(alias = "g_mime_stream_cat_add_source")]
    fn add_source(&self, source: &impl IsA<Stream>) -> i32;
}

impl<O: IsA<StreamCat>> StreamCatExt for O {
    fn add_source(&self, source: &impl IsA<Stream>) -> i32 {
        unsafe {
            ffi::g_mime_stream_cat_add_source(
                self.as_ref().to_glib_none().0,
                source.as_ref().to_glib_none().0,
            )
        }
    }
}

impl fmt::Display for StreamCat {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StreamCat")
    }
}
