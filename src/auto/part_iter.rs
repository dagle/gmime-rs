// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Object;
use glib::object::IsA;
use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct PartIter(Boxed<ffi::GMimePartIter>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::g_mime_part_iter_get_type(), ptr as *mut _) as *mut ffi::GMimePartIter,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::g_mime_part_iter_get_type(), ptr as *mut _),
        type_ => || ffi::g_mime_part_iter_get_type(),
    }
}

impl PartIter {
    #[doc(alias = "g_mime_part_iter_new")]
    pub fn new(toplevel: &impl IsA<Object>) -> PartIter {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::g_mime_part_iter_new(
                toplevel.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_mime_part_iter_clone")]
    pub fn clone(&mut self) -> Option<PartIter> {
        unsafe { from_glib_full(ffi::g_mime_part_iter_clone(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_get_current")]
    #[doc(alias = "get_current")]
    pub fn current(&mut self) -> Option<Object> {
        unsafe { from_glib_none(ffi::g_mime_part_iter_get_current(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_get_parent")]
    #[doc(alias = "get_parent")]
    pub fn parent(&mut self) -> Option<Object> {
        unsafe { from_glib_none(ffi::g_mime_part_iter_get_parent(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_get_path")]
    #[doc(alias = "get_path")]
    pub fn path(&mut self) -> Option<glib::GString> {
        unsafe { from_glib_full(ffi::g_mime_part_iter_get_path(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_get_toplevel")]
    #[doc(alias = "get_toplevel")]
    pub fn toplevel(&mut self) -> Option<Object> {
        unsafe {
            from_glib_none(ffi::g_mime_part_iter_get_toplevel(
                self.to_glib_none_mut().0,
            ))
        }
    }

    #[doc(alias = "g_mime_part_iter_is_valid")]
    pub fn is_valid(&mut self) -> bool {
        unsafe { from_glib(ffi::g_mime_part_iter_is_valid(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_jump_to")]
    pub fn jump_to(&mut self, path: &str) -> bool {
        unsafe {
            from_glib(ffi::g_mime_part_iter_jump_to(
                self.to_glib_none_mut().0,
                path.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_mime_part_iter_next")]
    pub fn next(&mut self) -> bool {
        unsafe { from_glib(ffi::g_mime_part_iter_next(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_prev")]
    pub fn prev(&mut self) -> bool {
        unsafe { from_glib(ffi::g_mime_part_iter_prev(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_remove")]
    pub fn remove(&mut self) -> bool {
        unsafe { from_glib(ffi::g_mime_part_iter_remove(self.to_glib_none_mut().0)) }
    }

    #[doc(alias = "g_mime_part_iter_replace")]
    pub fn replace(&mut self, replacement: &impl IsA<Object>) -> bool {
        unsafe {
            from_glib(ffi::g_mime_part_iter_replace(
                self.to_glib_none_mut().0,
                replacement.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "g_mime_part_iter_reset")]
    pub fn reset(&mut self) {
        unsafe {
            ffi::g_mime_part_iter_reset(self.to_glib_none_mut().0);
        }
    }
}
