// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Message;
use crate::Object;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeMessagePart")]
    pub struct MessagePart(Object<ffi::GMimeMessagePart, ffi::GMimeMessagePartClass>) @extends Object;

    match fn {
        type_ => || ffi::g_mime_message_part_get_type(),
    }
}

impl MessagePart {
    #[doc(alias = "g_mime_message_part_new")]
    pub fn new(subtype: &str) -> MessagePart {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::g_mime_message_part_new(subtype.to_glib_none().0)) }
    }

    #[doc(alias = "g_mime_message_part_new_with_message")]
    #[doc(alias = "new_with_message")]
    pub fn with_message(subtype: &str, message: &impl IsA<Message>) -> MessagePart {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::g_mime_message_part_new_with_message(
                subtype.to_glib_none().0,
                message.as_ref().to_glib_none().0,
            ))
        }
    }
}

pub const NONE_MESSAGE_PART: Option<&MessagePart> = None;

pub trait MessagePartExt: 'static {
    #[doc(alias = "g_mime_message_part_get_message")]
    #[doc(alias = "get_message")]
    fn message(&self) -> Option<Message>;

    #[doc(alias = "g_mime_message_part_set_message")]
    fn set_message(&self, message: &impl IsA<Message>);
}

impl<O: IsA<MessagePart>> MessagePartExt for O {
    fn message(&self) -> Option<Message> {
        unsafe {
            from_glib_none(ffi::g_mime_message_part_get_message(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn set_message(&self, message: &impl IsA<Message>) {
        unsafe {
            ffi::g_mime_message_part_set_message(
                self.as_ref().to_glib_none().0,
                message.as_ref().to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for MessagePart {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MessagePart")
    }
}
