// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use Message;
use Object;

glib_wrapper! {
    pub struct MessagePart(Object<gmime_sys::GMimeMessagePart, gmime_sys::GMimeMessagePartClass, MessagePartClass>) @extends Object;

    match fn {
        get_type => || gmime_sys::g_mime_message_part_get_type(),
    }
}

impl MessagePart {
    pub fn new(subtype: &str) -> MessagePart {
        unsafe {
            from_glib_full(gmime_sys::g_mime_message_part_new(subtype.to_glib_none().0))
        }
    }

    pub fn with_message<P: IsA<Message>>(subtype: &str, message: &P) -> MessagePart {
        unsafe {
            from_glib_full(gmime_sys::g_mime_message_part_new_with_message(subtype.to_glib_none().0, message.as_ref().to_glib_none().0))
        }
    }
}

pub const NONE_MESSAGE_PART: Option<&MessagePart> = None;

pub trait MessagePartExt: 'static {
    fn get_message(&self) -> Option<Message>;

    fn set_message<P: IsA<Message>>(&self, message: &P);
}

impl<O: IsA<MessagePart>> MessagePartExt for O {
    fn get_message(&self) -> Option<Message> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_message_part_get_message(self.as_ref().to_glib_none().0))
        }
    }

    fn set_message<P: IsA<Message>>(&self, message: &P) {
        unsafe {
            gmime_sys::g_mime_message_part_set_message(self.as_ref().to_glib_none().0, message.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for MessagePart {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MessagePart")
    }
}
