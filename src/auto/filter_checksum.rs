// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::Filter;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GMimeFilterChecksum")]
    pub struct FilterChecksum(Object<ffi::GMimeFilterChecksum, ffi::GMimeFilterChecksumClass>) @extends Filter;

    match fn {
        type_ => || ffi::g_mime_filter_checksum_get_type(),
    }
}

impl FilterChecksum {
    #[doc(alias = "g_mime_filter_checksum_new")]
    pub fn new(type_: glib::ChecksumType) -> FilterChecksum {
        assert_initialized_main_thread!();
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_checksum_new(type_.into_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_CHECKSUM: Option<&FilterChecksum> = None;

pub trait FilterChecksumExt: 'static {
    #[doc(alias = "g_mime_filter_checksum_get_string")]
    #[doc(alias = "get_string")]
    fn string(&self) -> Option<glib::GString>;
}

impl<O: IsA<FilterChecksum>> FilterChecksumExt for O {
    fn string(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::g_mime_filter_checksum_get_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl fmt::Display for FilterChecksum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FilterChecksum")
    }
}
