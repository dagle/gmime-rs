// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use glib::GString;
use gmime_sys;
use std::fmt;
use Filter;

glib_wrapper! {
    pub struct FilterChecksum(Object<gmime_sys::GMimeFilterChecksum, gmime_sys::GMimeFilterChecksumClass, FilterChecksumClass>) @extends Filter;

    match fn {
        get_type => || gmime_sys::g_mime_filter_checksum_get_type(),
    }
}

impl FilterChecksum {
    pub fn new(type_: glib::ChecksumType) -> FilterChecksum {
        unsafe {
            Filter::from_glib_full(gmime_sys::g_mime_filter_checksum_new(type_.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_CHECKSUM: Option<&FilterChecksum> = None;

pub trait FilterChecksumExt: 'static {
    fn get_digest(&self, digest: u8, len: usize) -> usize;

    fn get_string(&self) -> Option<GString>;
}

impl<O: IsA<FilterChecksum>> FilterChecksumExt for O {
    fn get_digest(&self, digest: u8, len: usize) -> usize {
        unsafe {
            gmime_sys::g_mime_filter_checksum_get_digest(self.as_ref().to_glib_none().0, digest, len)
        }
    }

    fn get_string(&self) -> Option<GString> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_filter_checksum_get_string(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for FilterChecksum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterChecksum")
    }
}
