// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use Error;
use Stream;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use std::ptr;

glib_wrapper! {
    pub struct StreamFile(Object<gmime_sys::GMimeStreamFile, gmime_sys::GMimeStreamFileClass, StreamFileClass>) @extends Stream;

    match fn {
        get_type => || gmime_sys::g_mime_stream_file_get_type(),
    }
}

impl StreamFile {
    //pub fn new(fp: /*Unimplemented*/Option<Fundamental: Pointer>) -> StreamFile {
    //    unsafe { TODO: call gmime_sys:g_mime_stream_file_new() }
    //}

    //pub fn new_with_bounds(fp: /*Unimplemented*/Option<Fundamental: Pointer>, start: i64, end: i64) -> StreamFile {
    //    unsafe { TODO: call gmime_sys:g_mime_stream_file_new_with_bounds() }
    //}

    pub fn open(path: &str, mode: &str) -> Result<Stream, Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let ret = gmime_sys::g_mime_stream_file_open(path.to_glib_none().0, mode.to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }
}

pub const NONE_STREAM_FILE: Option<&StreamFile> = None;

pub trait StreamFileExt: 'static {
    fn get_owner(&self) -> bool;

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamFile>> StreamFileExt for O {
    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_stream_file_get_owner(self.as_ref().to_glib_none().0))
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            gmime_sys::g_mime_stream_file_set_owner(self.as_ref().to_glib_none().0, owner.to_glib());
        }
    }
}

impl fmt::Display for StreamFile {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamFile")
    }
}
