// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct Filter(Object<ffi::GMimeFilter, ffi::GMimeFilterClass>);

    match fn {
        get_type => || ffi::g_mime_filter_get_type(),
    }
}

pub trait FilterExt {
    fn backup(&self, data: &[u8]);

    fn complete(&self, inbuf: &[u8], prespace: usize) -> (Vec<u8>, usize);

    fn copy(&self) -> Option<Filter>;

    fn filter(&self, inbuf: &[u8], prespace: usize) -> (Vec<u8>, usize);

    fn reset(&self);

    fn set_size(&self, size: usize, keep: bool);
}

impl<O: IsA<Filter>> FilterExt for O {
    fn backup(&self, data: &[u8]) {
        let length = data.len() as usize;
        unsafe {
            ffi::g_mime_filter_backup(self.to_glib_none().0, data.to_glib_none().0, length);
        }
    }

    fn complete(&self, inbuf: &[u8], prespace: usize) -> (Vec<u8>, usize) {
        let inlen = inbuf.len() as usize;
        unsafe {
            let mut outbuf = ptr::null_mut();
            let mut outlen = mem::uninitialized();
            let mut outprespace = mem::uninitialized();
            ffi::g_mime_filter_complete(self.to_glib_none().0, inbuf.to_glib_none().0, inlen, prespace, &mut outbuf, &mut outlen, &mut outprespace);
            (FromGlibContainer::from_glib_none_num(outbuf, outlen as usize), outprespace)
        }
    }

    fn copy(&self) -> Option<Filter> {
        unsafe {
            from_glib_full(ffi::g_mime_filter_copy(self.to_glib_none().0))
        }
    }

    fn filter(&self, inbuf: &[u8], prespace: usize) -> (Vec<u8>, usize) {
        let inlen = inbuf.len() as usize;
        unsafe {
            let mut outbuf = ptr::null_mut();
            let mut outlen = mem::uninitialized();
            let mut outprespace = mem::uninitialized();
            ffi::g_mime_filter_filter(self.to_glib_none().0, inbuf.to_glib_none().0, inlen, prespace, &mut outbuf, &mut outlen, &mut outprespace);
            (FromGlibContainer::from_glib_none_num(outbuf, outlen as usize), outprespace)
        }
    }

    fn reset(&self) {
        unsafe {
            ffi::g_mime_filter_reset(self.to_glib_none().0);
        }
    }

    fn set_size(&self, size: usize, keep: bool) {
        unsafe {
            ffi::g_mime_filter_set_size(self.to_glib_none().0, size, keep.to_glib());
        }
    }
}
