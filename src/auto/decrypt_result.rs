// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use CertificateList;
use DigestAlgo;
use SignatureList;
use ffi;
use glib::GString;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct DecryptResult(Object<ffi::GMimeDecryptResult, ffi::GMimeDecryptResultClass, DecryptResultClass>);

    match fn {
        get_type => || ffi::g_mime_decrypt_result_get_type(),
    }
}

impl DecryptResult {
    pub fn new() -> DecryptResult {
        unsafe {
            from_glib_full(ffi::g_mime_decrypt_result_new())
        }
    }
}

impl Default for DecryptResult {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_DECRYPT_RESULT: Option<&DecryptResult> = None;

pub trait DecryptResultExt: 'static {
    //fn get_cipher(&self) -> /*Ignored*/CipherAlgo;

    fn get_mdc(&self) -> DigestAlgo;

    fn get_recipients(&self) -> Option<CertificateList>;

    fn get_session_key(&self) -> Option<GString>;

    fn get_signatures(&self) -> Option<SignatureList>;

    //fn set_cipher(&self, cipher: /*Ignored*/CipherAlgo);

    fn set_mdc(&self, mdc: DigestAlgo);

    fn set_recipients<P: IsA<CertificateList>>(&self, recipients: &P);

    fn set_session_key<'a, P: Into<Option<&'a str>>>(&self, session_key: P);

    fn set_signatures<P: IsA<SignatureList>>(&self, signatures: &P);
}

impl<O: IsA<DecryptResult>> DecryptResultExt for O {
    //fn get_cipher(&self) -> /*Ignored*/CipherAlgo {
    //    unsafe { TODO: call ffi::g_mime_decrypt_result_get_cipher() }
    //}

    fn get_mdc(&self) -> DigestAlgo {
        unsafe {
            from_glib(ffi::g_mime_decrypt_result_get_mdc(self.as_ref().to_glib_none().0))
        }
    }

    fn get_recipients(&self) -> Option<CertificateList> {
        unsafe {
            from_glib_none(ffi::g_mime_decrypt_result_get_recipients(self.as_ref().to_glib_none().0))
        }
    }

    fn get_session_key(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_decrypt_result_get_session_key(self.as_ref().to_glib_none().0))
        }
    }

    fn get_signatures(&self) -> Option<SignatureList> {
        unsafe {
            from_glib_none(ffi::g_mime_decrypt_result_get_signatures(self.as_ref().to_glib_none().0))
        }
    }

    //fn set_cipher(&self, cipher: /*Ignored*/CipherAlgo) {
    //    unsafe { TODO: call ffi::g_mime_decrypt_result_set_cipher() }
    //}

    fn set_mdc(&self, mdc: DigestAlgo) {
        unsafe {
            ffi::g_mime_decrypt_result_set_mdc(self.as_ref().to_glib_none().0, mdc.to_glib());
        }
    }

    fn set_recipients<P: IsA<CertificateList>>(&self, recipients: &P) {
        unsafe {
            ffi::g_mime_decrypt_result_set_recipients(self.as_ref().to_glib_none().0, recipients.as_ref().to_glib_none().0);
        }
    }

    fn set_session_key<'a, P: Into<Option<&'a str>>>(&self, session_key: P) {
        let session_key = session_key.into();
        unsafe {
            ffi::g_mime_decrypt_result_set_session_key(self.as_ref().to_glib_none().0, session_key.to_glib_none().0);
        }
    }

    fn set_signatures<P: IsA<SignatureList>>(&self, signatures: &P) {
        unsafe {
            ffi::g_mime_decrypt_result_set_signatures(self.as_ref().to_glib_none().0, signatures.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for DecryptResult {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DecryptResult")
    }
}
