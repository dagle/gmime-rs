// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use Filter;
use Stream;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;

glib_wrapper! {
    pub struct StreamFilter(Object<gmime_sys::GMimeStreamFilter, gmime_sys::GMimeStreamFilterClass, StreamFilterClass>) @extends Stream;

    match fn {
        get_type => || gmime_sys::g_mime_stream_filter_get_type(),
    }
}

impl StreamFilter {
    pub fn new<P: IsA<Stream>>(stream: &P) -> StreamFilter {
        unsafe {
            Stream::from_glib_full(gmime_sys::g_mime_stream_filter_new(stream.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_STREAM_FILTER: Option<&StreamFilter> = None;

pub trait StreamFilterExt: 'static {
    fn add<P: IsA<Filter>>(&self, filter: &P) -> i32;

    fn get_owner(&self) -> bool;

    fn remove(&self, id: i32);

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamFilter>> StreamFilterExt for O {
    fn add<P: IsA<Filter>>(&self, filter: &P) -> i32 {
        unsafe {
            gmime_sys::g_mime_stream_filter_add(self.as_ref().to_glib_none().0, filter.as_ref().to_glib_none().0)
        }
    }

    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_stream_filter_get_owner(self.as_ref().to_glib_none().0))
        }
    }

    fn remove(&self, id: i32) {
        unsafe {
            gmime_sys::g_mime_stream_filter_remove(self.as_ref().to_glib_none().0, id);
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            gmime_sys::g_mime_stream_filter_set_owner(self.as_ref().to_glib_none().0, owner.to_glib());
        }
    }
}

impl fmt::Display for StreamFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamFilter")
    }
}
