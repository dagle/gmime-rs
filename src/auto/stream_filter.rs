// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Filter;
use Stream;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct StreamFilter(Object<ffi::GMimeStreamFilter, ffi::GMimeStreamFilterClass>): Stream;

    match fn {
        get_type => || ffi::g_mime_stream_filter_get_type(),
    }
}

impl StreamFilter {
    pub fn new<P: IsA<Stream>>(stream: &P) -> StreamFilter {
        unsafe {
            Stream::from_glib_full(ffi::g_mime_stream_filter_new(stream.to_glib_none().0)).downcast_unchecked()
        }
    }
}

pub trait StreamFilterExt {
    fn add<P: IsA<Filter>>(&self, filter: &P) -> i32;

    fn get_owner(&self) -> bool;

    fn remove(&self, id: i32);

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamFilter>> StreamFilterExt for O {
    fn add<P: IsA<Filter>>(&self, filter: &P) -> i32 {
        unsafe {
            ffi::g_mime_stream_filter_add(self.to_glib_none().0, filter.to_glib_none().0)
        }
    }

    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_stream_filter_get_owner(self.to_glib_none().0))
        }
    }

    fn remove(&self, id: i32) {
        unsafe {
            ffi::g_mime_stream_filter_remove(self.to_glib_none().0, id);
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            ffi::g_mime_stream_filter_set_owner(self.to_glib_none().0, owner.to_glib());
        }
    }
}
