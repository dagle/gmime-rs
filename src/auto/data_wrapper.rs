// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use ContentEncoding;
use Stream;

glib_wrapper! {
    pub struct DataWrapper(Object<gmime_sys::GMimeDataWrapper, gmime_sys::GMimeDataWrapperClass, DataWrapperClass>);

    match fn {
        get_type => || gmime_sys::g_mime_data_wrapper_get_type(),
    }
}

impl DataWrapper {
    pub fn new() -> DataWrapper {
        unsafe {
            from_glib_full(gmime_sys::g_mime_data_wrapper_new())
        }
    }

    pub fn with_stream<P: IsA<Stream>>(stream: &P, encoding: ContentEncoding) -> DataWrapper {
        unsafe {
            from_glib_full(gmime_sys::g_mime_data_wrapper_new_with_stream(stream.as_ref().to_glib_none().0, encoding.to_glib()))
        }
    }
}

impl Default for DataWrapper {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_DATA_WRAPPER: Option<&DataWrapper> = None;

pub trait DataWrapperExt: 'static {
    fn get_encoding(&self) -> ContentEncoding;

    fn get_stream(&self) -> Option<Stream>;

    fn set_encoding(&self, encoding: ContentEncoding);

    fn set_stream<P: IsA<Stream>>(&self, stream: &P);

    fn write_to_stream<P: IsA<Stream>>(&self, stream: &P) -> isize;
}

impl<O: IsA<DataWrapper>> DataWrapperExt for O {
    fn get_encoding(&self) -> ContentEncoding {
        unsafe {
            from_glib(gmime_sys::g_mime_data_wrapper_get_encoding(self.as_ref().to_glib_none().0))
        }
    }

    fn get_stream(&self) -> Option<Stream> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_data_wrapper_get_stream(self.as_ref().to_glib_none().0))
        }
    }

    fn set_encoding(&self, encoding: ContentEncoding) {
        unsafe {
            gmime_sys::g_mime_data_wrapper_set_encoding(self.as_ref().to_glib_none().0, encoding.to_glib());
        }
    }

    fn set_stream<P: IsA<Stream>>(&self, stream: &P) {
        unsafe {
            gmime_sys::g_mime_data_wrapper_set_stream(self.as_ref().to_glib_none().0, stream.as_ref().to_glib_none().0);
        }
    }

    fn write_to_stream<P: IsA<Stream>>(&self, stream: &P) -> isize {
        unsafe {
            gmime_sys::g_mime_data_wrapper_write_to_stream(self.as_ref().to_glib_none().0, stream.as_ref().to_glib_none().0)
        }
    }
}

impl fmt::Display for DataWrapper {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DataWrapper")
    }
}
