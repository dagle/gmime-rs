// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use ContentEncoding;
use Stream;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct DataWrapper(Object<ffi::GMimeDataWrapper, ffi::GMimeDataWrapperClass>);

    match fn {
        get_type => || ffi::g_mime_data_wrapper_get_type(),
    }
}

impl DataWrapper {
    pub fn new() -> DataWrapper {
        unsafe {
            from_glib_full(ffi::g_mime_data_wrapper_new())
        }
    }

    pub fn new_with_stream<P: IsA<Stream>>(stream: &P, encoding: ContentEncoding) -> DataWrapper {
        unsafe {
            from_glib_full(ffi::g_mime_data_wrapper_new_with_stream(stream.to_glib_none().0, encoding.to_glib()))
        }
    }
}

impl Default for DataWrapper {
    fn default() -> Self {
        Self::new()
    }
}

pub trait DataWrapperExt {
    fn get_encoding(&self) -> ContentEncoding;

    fn get_stream(&self) -> Option<Stream>;

    fn set_encoding(&self, encoding: ContentEncoding);

    fn set_stream<P: IsA<Stream>>(&self, stream: &P);

    fn write_to_stream<P: IsA<Stream>>(&self, stream: &P) -> isize;
}

impl<O: IsA<DataWrapper>> DataWrapperExt for O {
    fn get_encoding(&self) -> ContentEncoding {
        unsafe {
            from_glib(ffi::g_mime_data_wrapper_get_encoding(self.to_glib_none().0))
        }
    }

    fn get_stream(&self) -> Option<Stream> {
        unsafe {
            from_glib_none(ffi::g_mime_data_wrapper_get_stream(self.to_glib_none().0))
        }
    }

    fn set_encoding(&self, encoding: ContentEncoding) {
        unsafe {
            ffi::g_mime_data_wrapper_set_encoding(self.to_glib_none().0, encoding.to_glib());
        }
    }

    fn set_stream<P: IsA<Stream>>(&self, stream: &P) {
        unsafe {
            ffi::g_mime_data_wrapper_set_stream(self.to_glib_none().0, stream.to_glib_none().0);
        }
    }

    fn write_to_stream<P: IsA<Stream>>(&self, stream: &P) -> isize {
        unsafe {
            ffi::g_mime_data_wrapper_write_to_stream(self.to_glib_none().0, stream.to_glib_none().0)
        }
    }
}
