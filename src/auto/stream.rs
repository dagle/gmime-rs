// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use SeekWhence;
use StreamIOVector;

glib_wrapper! {
    pub struct Stream(Object<gmime_sys::GMimeStream, gmime_sys::GMimeStreamClass, StreamClass>);

    match fn {
        get_type => || gmime_sys::g_mime_stream_get_type(),
    }
}

pub const NONE_STREAM: Option<&Stream> = None;

pub trait StreamExt: 'static {
    fn buffer_gets(&self, buf: &str, max: usize) -> isize;

    fn buffer_readln(&self, buffer: &glib::ByteArray);

    fn close(&self) -> i32;

    fn construct(&self, start: i64, end: i64);

    fn eos(&self) -> bool;

    fn flush(&self) -> i32;

    fn length(&self) -> i64;

    //fn printf(&self, fmt: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> isize;

    fn read(&self, buf: &[u8]) -> isize;

    fn reset(&self) -> i32;

    fn seek(&self, offset: i64, whence: SeekWhence) -> i64;

    fn set_bounds(&self, start: i64, end: i64);

    fn substream(&self, start: i64, end: i64) -> Option<Stream>;

    fn tell(&self) -> i64;

    fn write(&self, buf: &str) -> isize;

    fn write_string(&self, str: &str) -> isize;

    fn write_to_stream<P: IsA<Stream>>(&self, dest: &P) -> i64;

    fn writev(&self, vector: &mut StreamIOVector, count: usize) -> i64;
}

impl<O: IsA<Stream>> StreamExt for O {
    fn buffer_gets(&self, buf: &str, max: usize) -> isize {
        unsafe {
            gmime_sys::g_mime_stream_buffer_gets(self.as_ref().to_glib_none().0, buf.to_glib_none().0, max)
        }
    }

    fn buffer_readln(&self, buffer: &glib::ByteArray) {
        unsafe {
            gmime_sys::g_mime_stream_buffer_readln(self.as_ref().to_glib_none().0, buffer.to_glib_none().0);
        }
    }

    fn close(&self) -> i32 {
        unsafe {
            gmime_sys::g_mime_stream_close(self.as_ref().to_glib_none().0)
        }
    }

    fn construct(&self, start: i64, end: i64) {
        unsafe {
            gmime_sys::g_mime_stream_construct(self.as_ref().to_glib_none().0, start, end);
        }
    }

    fn eos(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_stream_eos(self.as_ref().to_glib_none().0))
        }
    }

    fn flush(&self) -> i32 {
        unsafe {
            gmime_sys::g_mime_stream_flush(self.as_ref().to_glib_none().0)
        }
    }

    fn length(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_stream_length(self.as_ref().to_glib_none().0)
        }
    }

    //fn printf(&self, fmt: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> isize {
    //    unsafe { TODO: call gmime_sys:g_mime_stream_printf() }
    //}

    fn read(&self, buf: &[u8]) -> isize {
        let len = buf.len() as usize;
        unsafe {
            gmime_sys::g_mime_stream_read(self.as_ref().to_glib_none().0, buf.to_glib_none().0, len)
        }
    }

    fn reset(&self) -> i32 {
        unsafe {
            gmime_sys::g_mime_stream_reset(self.as_ref().to_glib_none().0)
        }
    }

    fn seek(&self, offset: i64, whence: SeekWhence) -> i64 {
        unsafe {
            gmime_sys::g_mime_stream_seek(self.as_ref().to_glib_none().0, offset, whence.to_glib())
        }
    }

    fn set_bounds(&self, start: i64, end: i64) {
        unsafe {
            gmime_sys::g_mime_stream_set_bounds(self.as_ref().to_glib_none().0, start, end);
        }
    }

    fn substream(&self, start: i64, end: i64) -> Option<Stream> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_stream_substream(self.as_ref().to_glib_none().0, start, end))
        }
    }

    fn tell(&self) -> i64 {
        unsafe {
            gmime_sys::g_mime_stream_tell(self.as_ref().to_glib_none().0)
        }
    }

    fn write(&self, buf: &str) -> isize {
        let len = buf.len() as usize;
        unsafe {
            gmime_sys::g_mime_stream_write(self.as_ref().to_glib_none().0, buf.to_glib_none().0, len)
        }
    }

    fn write_string(&self, str: &str) -> isize {
        unsafe {
            gmime_sys::g_mime_stream_write_string(self.as_ref().to_glib_none().0, str.to_glib_none().0)
        }
    }

    fn write_to_stream<P: IsA<Stream>>(&self, dest: &P) -> i64 {
        unsafe {
            gmime_sys::g_mime_stream_write_to_stream(self.as_ref().to_glib_none().0, dest.as_ref().to_glib_none().0)
        }
    }

    fn writev(&self, vector: &mut StreamIOVector, count: usize) -> i64 {
        unsafe {
            gmime_sys::g_mime_stream_writev(self.as_ref().to_glib_none().0, vector.to_glib_none_mut().0, count)
        }
    }
}

impl fmt::Display for Stream {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Stream")
    }
}
