// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use gio;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use Stream;

glib_wrapper! {
    pub struct StreamGIO(Object<gmime_sys::GMimeStreamGIO, gmime_sys::GMimeStreamGIOClass, StreamGIOClass>) @extends Stream;

    match fn {
        get_type => || gmime_sys::g_mime_stream_gio_get_type(),
    }
}

impl StreamGIO {
    pub fn new<P: IsA<gio::File>>(file: &P) -> StreamGIO {
        unsafe {
            Stream::from_glib_full(gmime_sys::g_mime_stream_gio_new(file.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }

    pub fn with_bounds<P: IsA<gio::File>>(file: &P, start: i64, end: i64) -> StreamGIO {
        unsafe {
            Stream::from_glib_full(gmime_sys::g_mime_stream_gio_new_with_bounds(file.as_ref().to_glib_none().0, start, end)).unsafe_cast()
        }
    }
}

pub const NONE_STREAM_GIO: Option<&StreamGIO> = None;

pub trait StreamGIOExt: 'static {
    fn get_owner(&self) -> bool;

    fn set_owner(&self, owner: bool);
}

impl<O: IsA<StreamGIO>> StreamGIOExt for O {
    fn get_owner(&self) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_stream_gio_get_owner(self.as_ref().to_glib_none().0))
        }
    }

    fn set_owner(&self, owner: bool) {
        unsafe {
            gmime_sys::g_mime_stream_gio_set_owner(self.as_ref().to_glib_none().0, owner.to_glib());
        }
    }
}

impl fmt::Display for StreamGIO {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StreamGIO")
    }
}
