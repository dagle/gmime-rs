// This file was generated by gir (https://github.com/gtk-rs/gir @ 9e3cb65)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8+)
// DO NOT EDIT

use ContentEncoding;
use EncodingConstraint;
use Filter;
use FilterBestFlags;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;

glib_wrapper! {
    pub struct FilterBest(Object<gmime_sys::GMimeFilterBest, gmime_sys::GMimeFilterBestClass, FilterBestClass>) @extends Filter;

    match fn {
        get_type => || gmime_sys::g_mime_filter_best_get_type(),
    }
}

impl FilterBest {
    pub fn new(flags: FilterBestFlags) -> FilterBest {
        unsafe {
            Filter::from_glib_full(gmime_sys::g_mime_filter_best_new(flags.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_BEST: Option<&FilterBest> = None;

pub trait FilterBestExt: 'static {
    fn charset(&self) -> Option<GString>;

    fn encoding(&self, constraint: EncodingConstraint) -> ContentEncoding;
}

impl<O: IsA<FilterBest>> FilterBestExt for O {
    fn charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_filter_best_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn encoding(&self, constraint: EncodingConstraint) -> ContentEncoding {
        unsafe {
            from_glib(gmime_sys::g_mime_filter_best_encoding(self.as_ref().to_glib_none().0, constraint.to_glib()))
        }
    }
}

impl fmt::Display for FilterBest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterBest")
    }
}
