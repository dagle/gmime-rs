// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use gmime_sys;
use std::fmt;
use InternetAddress;
use InternetAddressList;

glib_wrapper! {
    pub struct InternetAddressGroup(Object<gmime_sys::InternetAddressGroup, gmime_sys::InternetAddressGroupClass, InternetAddressGroupClass>) @extends InternetAddress;

    match fn {
        get_type => || gmime_sys::internet_address_group_get_type(),
    }
}

impl InternetAddressGroup {
    pub fn new(name: &str) -> InternetAddressGroup {
        unsafe {
            InternetAddress::from_glib_full(gmime_sys::internet_address_group_new(name.to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_INTERNET_ADDRESS_GROUP: Option<&InternetAddressGroup> = None;

pub trait InternetAddressGroupExt: 'static {
    fn add_member<P: IsA<InternetAddress>>(&self, member: &P) -> i32;

    fn get_members(&self) -> Option<InternetAddressList>;

    fn set_members<P: IsA<InternetAddressList>>(&self, members: &P);
}

impl<O: IsA<InternetAddressGroup>> InternetAddressGroupExt for O {
    fn add_member<P: IsA<InternetAddress>>(&self, member: &P) -> i32 {
        unsafe {
            gmime_sys::internet_address_group_add_member(self.as_ref().to_glib_none().0, member.as_ref().to_glib_none().0)
        }
    }

    fn get_members(&self) -> Option<InternetAddressList> {
        unsafe {
            from_glib_none(gmime_sys::internet_address_group_get_members(self.as_ref().to_glib_none().0))
        }
    }

    fn set_members<P: IsA<InternetAddressList>>(&self, members: &P) {
        unsafe {
            gmime_sys::internet_address_group_set_members(self.as_ref().to_glib_none().0, members.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for InternetAddressGroup {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InternetAddressGroup")
    }
}
