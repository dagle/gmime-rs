// This file was generated by gir (https://github.com/gtk-rs/gir @ 2f0a317)
// from gir-files (https://github.com/gtk-rs/gir-files @ b215ee8)
// DO NOT EDIT

use Filter;
use ffi;
use glib::GString;
use glib::object::Cast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct FilterWindows(Object<ffi::GMimeFilterWindows, ffi::GMimeFilterWindowsClass, FilterWindowsClass>) @extends Filter;

    match fn {
        get_type => || ffi::g_mime_filter_windows_get_type(),
    }
}

impl FilterWindows {
    pub fn new(claimed_charset: &str) -> FilterWindows {
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_windows_new(claimed_charset.to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_FILTER_WINDOWS: Option<&FilterWindows> = None;

pub trait FilterWindowsExt: 'static {
    fn is_windows_charset(&self) -> bool;

    fn real_charset(&self) -> Option<GString>;
}

impl<O: IsA<FilterWindows>> FilterWindowsExt for O {
    fn is_windows_charset(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_filter_windows_is_windows_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn real_charset(&self) -> Option<GString> {
        unsafe {
            from_glib_none(ffi::g_mime_filter_windows_real_charset(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for FilterWindows {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FilterWindows")
    }
}
