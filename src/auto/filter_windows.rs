// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/vhdirk/gir-files.git)
// DO NOT EDIT

use crate::{Filter};
use glib::{prelude::*,translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "GMimeFilterWindows")]
    pub struct FilterWindows(Object<ffi::GMimeFilterWindows, ffi::GMimeFilterWindowsClass>) @extends Filter;

    match fn {
        type_ => || ffi::g_mime_filter_windows_get_type(),
    }
}

impl FilterWindows {
        pub const NONE: Option<&'static FilterWindows> = None;
    

    #[doc(alias = "g_mime_filter_windows_new")]
    pub fn new(claimed_charset: &str) -> FilterWindows {
        assert_initialized_main_thread!();
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_windows_new(claimed_charset.to_glib_none().0)).unsafe_cast()
        }
    }
}

pub trait FilterWindowsExt: 'static {
    #[doc(alias = "g_mime_filter_windows_is_windows_charset")]
    fn is_windows_charset(&self) -> bool;

    #[doc(alias = "g_mime_filter_windows_real_charset")]
    fn real_charset(&self) -> Option<glib::GString>;
}

impl<O: IsA<FilterWindows>> FilterWindowsExt for O {
    fn is_windows_charset(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_filter_windows_is_windows_charset(self.as_ref().to_glib_none().0))
        }
    }

    fn real_charset(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::g_mime_filter_windows_real_charset(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for FilterWindows {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FilterWindows")
    }
}
