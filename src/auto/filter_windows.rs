// This file was generated by gir (https://github.com/gtk-rs/gir @ fe7a6ff+)
// from gir-files (https://github.com/gtk-rs/gir-files @ 33386b3)
// DO NOT EDIT

use Filter;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct FilterWindows(Object<ffi::GMimeFilterWindows, ffi::GMimeFilterWindowsClass>): Filter;

    match fn {
        get_type => || ffi::g_mime_filter_windows_get_type(),
    }
}

impl FilterWindows {
    pub fn new(claimed_charset: &str) -> FilterWindows {
        unsafe {
            Filter::from_glib_full(ffi::g_mime_filter_windows_new(claimed_charset.to_glib_none().0)).downcast_unchecked()
        }
    }
}

pub trait FilterWindowsExt {
    fn is_windows_charset(&self) -> bool;

    fn real_charset(&self) -> Option<String>;
}

impl<O: IsA<FilterWindows>> FilterWindowsExt for O {
    fn is_windows_charset(&self) -> bool {
        unsafe {
            from_glib(ffi::g_mime_filter_windows_is_windows_charset(self.to_glib_none().0))
        }
    }

    fn real_charset(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_mime_filter_windows_real_charset(self.to_glib_none().0))
        }
    }
}
