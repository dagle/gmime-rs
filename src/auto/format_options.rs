// This file was generated by gir (https://github.com/gtk-rs/gir @ ad40c01)
// from gir-files (https://github.com/gtk-rs/gir-files @ 5b96546)
// DO NOT EDIT

use glib::translate::*;
use glib::GString;
use gmime_sys;
use gobject_sys;
use Filter;
use NewLineFormat;
use ParamEncodingMethod;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct FormatOptions(Boxed<gmime_sys::GMimeFormatOptions>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(gmime_sys::g_mime_format_options_get_type(), ptr as *mut _) as *mut gmime_sys::GMimeFormatOptions,
        free => |ptr| gobject_sys::g_boxed_free(gmime_sys::g_mime_format_options_get_type(), ptr as *mut _),
        get_type => || gmime_sys::g_mime_format_options_get_type(),
    }
}

impl FormatOptions {
    pub fn new() -> FormatOptions {
        unsafe {
            from_glib_full(gmime_sys::g_mime_format_options_new())
        }
    }

    pub fn add_hidden_header(&mut self, header: &str) {
        unsafe {
            gmime_sys::g_mime_format_options_add_hidden_header(self.to_glib_none_mut().0, header.to_glib_none().0);
        }
    }

    pub fn clear_hidden_headers(&mut self) {
        unsafe {
            gmime_sys::g_mime_format_options_clear_hidden_headers(self.to_glib_none_mut().0);
        }
    }

    pub fn clone(&mut self) -> Option<FormatOptions> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_format_options_clone(self.to_glib_none_mut().0))
        }
    }

    pub fn create_newline_filter(&mut self, ensure_newline: bool) -> Option<Filter> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_format_options_create_newline_filter(self.to_glib_none_mut().0, ensure_newline.to_glib()))
        }
    }

    pub fn get_newline(&mut self) -> Option<GString> {
        unsafe {
            from_glib_none(gmime_sys::g_mime_format_options_get_newline(self.to_glib_none_mut().0))
        }
    }

    pub fn get_newline_format(&mut self) -> NewLineFormat {
        unsafe {
            from_glib(gmime_sys::g_mime_format_options_get_newline_format(self.to_glib_none_mut().0))
        }
    }

    pub fn get_param_encoding_method(&mut self) -> ParamEncodingMethod {
        unsafe {
            from_glib(gmime_sys::g_mime_format_options_get_param_encoding_method(self.to_glib_none_mut().0))
        }
    }

    pub fn is_hidden_header(&mut self, header: &str) -> bool {
        unsafe {
            from_glib(gmime_sys::g_mime_format_options_is_hidden_header(self.to_glib_none_mut().0, header.to_glib_none().0))
        }
    }

    pub fn remove_hidden_header(&mut self, header: &str) {
        unsafe {
            gmime_sys::g_mime_format_options_remove_hidden_header(self.to_glib_none_mut().0, header.to_glib_none().0);
        }
    }

    pub fn set_newline_format(&mut self, newline: NewLineFormat) {
        unsafe {
            gmime_sys::g_mime_format_options_set_newline_format(self.to_glib_none_mut().0, newline.to_glib());
        }
    }

    pub fn set_param_encoding_method(&mut self, method: ParamEncodingMethod) {
        unsafe {
            gmime_sys::g_mime_format_options_set_param_encoding_method(self.to_glib_none_mut().0, method.to_glib());
        }
    }

    pub fn get_default() -> Option<FormatOptions> {
        unsafe {
            from_glib_full(gmime_sys::g_mime_format_options_get_default())
        }
    }
}

impl Default for FormatOptions {
    fn default() -> Self {
        Self::new()
    }
}
